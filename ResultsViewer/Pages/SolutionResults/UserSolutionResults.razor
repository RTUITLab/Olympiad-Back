@page "/challenge/{ChallengeId:guid}/user/{UserId:guid}/solution/{SolutionId:guid}"

@inherits LockSafe<Models.ApplicationDbContext>

@inject NavigationManager navManager

<PageHeader Title="@(solution?.Exercise?.ExerciseName ?? "Loading...")"
            OnBack="@(() => navManager.NavigateTo($"challenge/{ChallengeId}/user/{UserId}"))">
    <PageHeaderContent>
        @if (solution != null)
        {
            <Descriptions>
                <DescriptionsItem Title="Challenge">
                    <NavLink href="@($"/admin/challenges/{solution.Exercise.ChallengeId}")">@solution.Exercise.Challenge.Name</NavLink>
                </DescriptionsItem>
                <DescriptionsItem Title="Student ID">@solution.User.StudentID</DescriptionsItem>
                <DescriptionsItem Title="Student name">@solution.User.FirstName</DescriptionsItem>
                <DescriptionsItem Title="Sent time">@solution.SendingTime</DescriptionsItem>
                <DescriptionsItem Title="Lang">@solution.Language</DescriptionsItem>
                <DescriptionsItem Title="Exercise">
                    <NavLink href="@($"/admin/challenges/{ChallengeId}/exercises/{solution.ExerciseId}")">@solution.Exercise.ExerciseName</NavLink>
                </DescriptionsItem>
                <DescriptionsItem Title="Score">
                    @if (solution.TotalScore.HasValue)
                    {
                        <p>@solution.TotalScore.Value</p>
                    }
                    else
                    {
                        <p>No score</p>
                    }
                </DescriptionsItem>
                <DescriptionsItem Title="Status">@solution.Status</DescriptionsItem>
                <DescriptionsItem Title="Source"><Button Type="@ButtonType.Primary" OnClick="() => showSourceCode = true">Show</Button></DescriptionsItem>
            </Descriptions>
        }
        else
        {
            <Spin Size="large" />
        }
    </PageHeaderContent>
</PageHeader>

<Tabs DefaultActiveKey="checks" @bind-ActiveKey="tabs">
    <TabPane Key="chacks" Tab="Checks">
        <SolutionCheckView SolutionId="SolutionId" />
    </TabPane>
    <TabPane Key="build_logs" Tab="Build logs">
        <Collapse>
            @foreach (var log in solution.SolutionBuildLogs)
            {
                <Panel Header="@log.BuildedTime.ToString()" Key="@log.Id.ToString()">
                    <RadioGroup @bind-Value="@buildLogMode">
                        <Radio RadioButton Value="@("pretty")">Pretty</Radio>
                        <Radio RadioButton Value="@("raw")">Raw</Radio>
                    </RadioGroup>
                    <br />
                    <AntDesign.Text Style="white-space: pre-wrap">
                        @(buildLogMode == "pretty" ? log.PrettyLog : log.Log)
                    </AntDesign.Text>
                </Panel>
            }
        </Collapse>
    </TabPane>
</Tabs>

<Drawer Width="800"
        Closable="true"
        Visible="showSourceCode"
        Placement="right"
        Title='("Source code")'
        OnClose="() => showSourceCode = false">
    @if (solution == null)
    {
        <Skeleton Active></Skeleton>
    }
    else
    {
        <AntDesign.Text Copyable CopyConfig="new TypographyCopyableConfig { Text=solution.Raw }" style="overflow:auto; white-space:pre">@solution.Raw</AntDesign.Text>
    }
</Drawer>

@code {
    [Parameter]
    public Guid ChallengeId { get; set; }
    [Parameter]
    public Guid UserId { get; set; }
    [Parameter]
    public Guid SolutionId { get; set; }

    private Models.Solutions.Solution solution;
    private string tabs = "checks";
    private string buildLogMode = "pretty";
    private bool showSourceCode = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await DoSafe(async c =>
        {
            solution = await c
                .Solutions
                .Include(s => s.SolutionBuildLogs)
                .Include(s => s.Exercise)
                    .ThenInclude(e => e.Challenge)
                .Include(s => s.User)
                .SingleOrDefaultAsync(s => s.Id == SolutionId);
        });
    }

}
