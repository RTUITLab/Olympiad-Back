@using Markdig.Prism

@inject Olympiad.Services.UserSolutionsReport.UserSolutionsReportCreator creator
@inject Microsoft.Extensions.Options.IOptions<ResultsViewer.Options.GeneratePdfOptions> PdfGenerateOptions
@inject IJSRuntime JS
@using Markdig
@using Olympiad.Shared.Services

<CreatePDFReportOptions @bind-ReportOptions="userSolutionsReportOptions" Disabled="loading" />
<Button OnClick="CreateRepots" Disabled="loading">Create</Button>

@if (loading)
{
    <Progress Percent="done" Status="@ProgressStatus.Active" />
    <p>@currentAction</p>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <Result Status="error"
            Title="Can't create report"
            SubTitle="@errorMessage" />
}
@if (success)
{
    <Result Status="success"
            Title="Report(s) successfully  created" />
}

@code {

    [Parameter]
    public Guid ChallengeId { get; set; }

    [Parameter]
    public List<string> UserStudentIds { get; set; }

    [Parameter]
    public string FileName { get; set; }

    private bool loading = false;
    private bool success = false;
    private string currentAction;
    private string errorMessage;
    private int done = 0;

    private UserSolutionsReportOptions userSolutionsReportOptions = UserSolutionsReportOptions.Default;


    private static readonly Markdig.MarkdownPipeline pipeline = new Markdig.MarkdownPipelineBuilder()
            .UseEmojiAndSmiley()
            .UseAdvancedExtensions()
            .UsePipeTables()
            .Build();

    private async Task CreateRepots()
    {
        if (loading)
        {
            return;
        }
        done = 0;
        success = false;
        errorMessage = null;
        loading = true;
        try
        {
            await using var zipPacker = await JS.InvokeAsync<IJSObjectReference>("createZipPacker", PdfGenerateOptions.Value.PrintUrl);
            foreach (var (userStudentId, i) in UserStudentIds.Select((u, i) => (u, i)))
            {
                currentAction = $"{userStudentId}: creating template"; StateHasChanged();
                var markdown = await creator.CreateMarkdownReport(userStudentId, ChallengeId, userSolutionsReportOptions);
                var html = Markdig.Markdown.ToHtml(markdown, new MarkdownPipelineBuilder().UsePipeTables().UsePreciseSourceLocation().UseAdvancedExtensions().UsePrism().Build());
                currentAction = $"{userStudentId}: creating report"; StateHasChanged();

                await zipPacker.InvokeAsync<string>("addHtmlToPdfFile", $"{userStudentId}.pdf", html);
                done = (int)((double)i / UserStudentIds.Count * 100); StateHasChanged();
            }
            currentAction = $"downloading archive"; StateHasChanged();
            await zipPacker.InvokeAsync<string>("saveArchive", FileName);
            success = true;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

}
