@page "/users/{UserId:guid}"
@using BlazorStrap

@inherits OwningComponentBase<Microsoft.AspNetCore.Identity.UserManager<User>>

@inject Olympiad.Admin.Services.UserPasswordGenerator userPasswordGenerator

@inject NavigationManager navigationManager
@inject Olympiad.Services.Authorization.IJwtFactory jwtFctory

<h3>EditUser</h3>
<NavLink href="users">Back to users</NavLink>

@if (user == null)
{
    <p>Loading</p>
}
else
{
    <BlazorStrap.BSRow>
        <div class="col-6">
            <BSForm Model="user" OnValidSubmit="UpdateUser">
                <BSFormGroup>
                    <BSLabel>
                        Student ID
                        <BSInput InputType="InputType.Text" PlaceHolder="Enter student id" @bind-Value="user.StudentID"></BSInput>
                    </BSLabel>
                </BSFormGroup>
                <BSFormGroup>
                    <BSLabel>
                        First name
                        <BSInput InputType="InputType.Text" PlaceHolder="Enter student first name" @bind-Value="user.FirstName"></BSInput>
                    </BSLabel>
                </BSFormGroup>
                <BSFormGroup>
                    <BSButton Color="Color.Warning" ButtonType="ButtonType.Submit">Update user general info</BSButton>
                </BSFormGroup>
            </BSForm>
            <h4>Claims</h4>
            @if (Claims == null)
            {
                <p>Loading claims</p>
            }
            else
            {

                <BlazorStrap.BSTable IsBordered="true">
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Value</th>
                            <th>.</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var claim in Claims)
                        {
                            <tr>
                                <td>@claim.Type</td>
                                <td>@claim.Value</td>
                                <td><BSButton Color="Color.Warning" @onclick="() => RemoveClaim(claim)">Remove claim</BSButton></td>
                            </tr>
                        }
                        <tr>
                            <td>
                                <input type="text" class="input-group-text" PlaceHolder="Enter claim type" @bind="claimToAdd.Type" />
                            </td>
                            <td>
                                <input type="tel" class="input-group-text" PlaceHolder="Enter claim value" @bind="claimToAdd.Value" />
                            </td>
                            <td>
                                <BSButton Color="Color.Success" OnClick="AddClaim">Add claim value</BSButton>
                            </td>
                        </tr>
                    </tbody>
                </BlazorStrap.BSTable>
            }
            <h4>Password</h4>
            @if (!string.IsNullOrEmpty(generatedPassword))
            {
                <p>@generatedPassword</p>
            }
            <button class="btn btn-warning" @onclick="RengeneratePassword">Regenerate password</button>
        </div>

        <div class="col-4">
            <button class="btn btn-secondary" @onclick="LoginAsUser">Login as @user.FirstName</button>
        </div>
        <div class="col-2">
            <button class="btn btn-danger" @onclick="DeleteUser">Delete</button>
        </div>
    </BlazorStrap.BSRow>
}

@code {

    [Parameter]
    public Guid UserId { get; set; }
    User user;
    IList<System.Security.Claims.Claim> Claims;
    private ClaimToAddModel claimToAdd = new ClaimToAddModel();
    private string generatedPassword;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnInitializedAsync();
        user = null;
        user = await Service.FindByIdAsync(UserId.ToString());
        await LoadClaims();
    }

    private async Task UpdateUser()
    {
        await Service.UpdateAsync(user);
    }

    private async Task AddClaim()
    {
        await Service.AddClaimAsync(user, new System.Security.Claims.Claim(claimToAdd.Type, claimToAdd.Value));
        claimToAdd = new ClaimToAddModel();
        await LoadClaims();
    }

    private async Task RemoveClaim(System.Security.Claims.Claim claim)
    {
        await Service.RemoveClaimAsync(user, claim);
        await LoadClaims();
    }

    private async Task LoadClaims()
    {
        Claims = await Service.GetClaimsAsync(user);
    }

    private async Task DeleteUser()
    {
        await Service.DeleteAsync(user);
        navigationManager.NavigateTo("users");
    }

    private async Task RengeneratePassword()
    {
        await Service.RemovePasswordAsync(user);
        var password = userPasswordGenerator.GeneratePassword();
        await Service.AddPasswordAsync(user, password);
        generatedPassword = password;
    }

    private async Task LoginAsUser()
    {
        var roles = await Service.GetRolesAsync(user);
        var token = jwtFctory.GenerateToken(user, roles);
        navigationManager.NavigateTo($"/#{token}", true);
    }

    private class ClaimToAddModel
    {
        public string Type { get; set; } = "";
        public string Value { get; set; } = "";
    }
}
