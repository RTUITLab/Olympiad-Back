@page "/challenges/{challengeId:guid}"

@inherits OwningComponentBase<ApplicationDbContext>
@inject Microsoft.Extensions.Options.IOptions<Options.EnvironmentOptions> EnvironmentOptions

@using Microsoft.EntityFrameworkCore
@using Olympiad.Shared.Models

@inject NavigationManager navigationManager
@inject IJSRuntime JS

<h3>ChallengeEdit</h3>
<NavLink href="challenges">Go to challenges list</NavLink>
@if (challenge == null)
{
    <p>Loading</p>
}
else
{
    <p></p>
    <div class="row">
        <div class="col">
            <EditForm Model="challenge" OnValidSubmit="UpdateChallenge">
                <div class="form-group">
                    <label for="challenge-title">Title</label>
                    <InputText id="challenge-title" class="form-control" @bind-Value="challenge.Name" />
                </div>
                <div class="form-group">
                    <label for="challenge-description">Description</label>
                    <InputTextArea id="challenge-description" class="form-control" @bind-Value="challenge.Description" />
                </div>
                <div class="form-group">
                    <label for="challenge.start">Start</label>
                    <input class="form-control" id="challenge.start" @bind="challenge.StartTime" @bind:format="yyyy-MM-dd HH:mm" placeholder="yyyy-MM-dd HH:mm" />
                    @if (!challenge.StartTime.HasValue)
                    {
                        <BlazorStrap.BSRow>
                            <BlazorStrap.BSCol>
                                <p>Start is null </p>
                            </BlazorStrap.BSCol>
                            <BlazorStrap.BSCol>
                                <BlazorStrap.BSButton @onclick="@(() => challenge.StartTime = GetNow())"
                                                      Color="BlazorStrap.Color.Primary">Fill now time</BlazorStrap.BSButton>
                            </BlazorStrap.BSCol>
                        </BlazorStrap.BSRow>
                    }
                    else
                    {
                        <p>
                            Offset is
                            @challenge.StartTime.Value.Offset
                        </p>
                    }
                </div>
                <div class="form-group">
                    <label for="challenge.end">End</label>
                    <input class="form-control" id="challenge.end" @bind="challenge.EndTime" @bind:format="yyyy-MM-dd HH:mm" placeholder="yyyy-MM-dd HH:mm" />
                    @if (!challenge.EndTime.HasValue)
                    {
                        <BlazorStrap.BSRow>
                            <BlazorStrap.BSCol>
                                <p>End is null </p>
                            </BlazorStrap.BSCol>
                            <BlazorStrap.BSCol>
                                <BlazorStrap.BSButton @onclick="@(() => challenge.EndTime = GetNow())"
                                                      Color="BlazorStrap.Color.Primary">Fill now time</BlazorStrap.BSButton>
                            </BlazorStrap.BSCol>
                        </BlazorStrap.BSRow>
                    }
                    else
                    {
                        <p>
                            Offset is
                            @challenge.EndTime.Value.Offset
                        </p>
                    }
                </div>

                <div class="form-group">
                    <label for="challenge-view-mode">View mode</label>
                    <InputSelect class="form-control" id="challenge-view-mode" @bind-Value="challenge.ViewMode">
                        @foreach (var mode in Enum.GetValues(typeof(ChallengeViewMode)))
                            {
                            <option value="@mode">@mode</option>
                            }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label for="challenge-access-mode">Access mode</label>
                    <InputSelect class="form-control" id="challenge-access-mode" @bind-Value="challenge.ChallengeAccessType">
                        @foreach (var mode in Enum.GetValues(typeof(Olympiad.Shared.Models.ChallengeAccessType)))
                            {
                            <option value="@mode">@mode</option>
                            }
                    </InputSelect>
                </div>
                @if (Service.Entry(challenge).State == EntityState.Modified)
                {
                    <button type="submit" class="btn btn-primary">Update</button>
                }
            </EditForm>
            <NavLink href=@($"challenges/{ChallengeId}/exercises")>
                <button class="btn btn-primary">
                    Exercises
                </button>
            </NavLink>
            <button class="btn btn-danger" @onclick="DeleteChallenge">Delete</button>
        </div>
        <div class="col">
            <h4>Access settings</h4>
            @switch (challenge.ChallengeAccessType)
            {
                case Olympiad.Shared.Models.ChallengeAccessType.Public:
                    <p>Everybody has access to that challenge</p>
                    break;
                case Olympiad.Shared.Models.ChallengeAccessType.Private:
                    <ChallengeInvitedUsers ChallengeId="ChallengeId" />
                    break;
                default:
                    <p>Incorrect access type</p>
                    break;
            }
        </div>
    </div>


}

@code {
    [Parameter]
    public Guid ChallengeId { get; set; }
    private Models.Exercises.Challenge challenge;

    private DateTimeOffset GetNow()
    {
        var now = DateTimeOffset.UtcNow;
        now = now.ToOffset(EnvironmentOptions.Value.EditingDateoffset);
        return now;
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        challenge = await Service.Challenges
            .SingleOrDefaultAsync(ch => ch.Id == ChallengeId);
        if (challenge.StartTime.HasValue)
        {
            challenge.StartTime = challenge.StartTime.Value.ToOffset(EnvironmentOptions.Value.EditingDateoffset);
        }
        if (challenge.EndTime.HasValue)
        {
            challenge.EndTime = challenge.EndTime.Value.ToOffset(EnvironmentOptions.Value.EditingDateoffset);
        }
    }

    private async Task UpdateChallenge()
    {
        await Service.SaveChangesAsync();
    }
    private async Task DeleteChallenge()
    {
        if (await (JS.InvokeAsync<bool>("confirm", "Are you sure to delete challenge?")))
        {
            Service.Remove(challenge);
            await Service.SaveChangesAsync();
            navigationManager.NavigateTo($"challenges");
        }
    }
}
