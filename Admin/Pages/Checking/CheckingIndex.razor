@page "/checking"
@using Olympiad.Services.SolutionCheckQueue

@inherits OwningComponentBase<ApplicationDbContext>

@inject IQueueChecker QueueChecker

<p>Done in last 2 minutes: @doneInLast10Mins</p>
<p>Left: @Left() --- @(doneInLast10Mins == 0 ? "~" : TimeSpan.FromMinutes((Left() / (doneInLast10Mins == 0 ? 1 : doneInLast10Mins)) * 2).ToString())</p>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Type</th>
            <th>Count</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var i in solutionCountRecords)
        {
            <tr>
                <td>@i.Key</td>
                <td>@i.Value</td>
                <td><button class="btn btn-warning" @onclick="() => RecheckAllSolutions(i.Key)">Recheck all solutions</button></td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-danger" @onclick="ReCheckAllSolutions">Recheck all solutions</button>

<Olympiad.Admin.Components.Logs @ref="Logs" />

@code {
    Dictionary<Olympiad.Shared.Models.SolutionStatus, int> solutionCountRecords =
        Enum.GetValues(typeof(Olympiad.Shared.Models.SolutionStatus))
            .Cast<Olympiad.Shared.Models.SolutionStatus>()
            .ToDictionary(s => s, _ => 0);

    int doneInLast10Mins = 0;
    Olympiad.Admin.Components.Logs Logs;

    System.Threading.CancellationTokenSource source = new System.Threading.CancellationTokenSource();
    Task updateTask;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await Update();
            updateTask = UpdateCycle(source.Token);
        }
    }

    private int Left()
    {
        return
            solutionCountRecords[Olympiad.Shared.Models.SolutionStatus.InProcessing]
            +
            solutionCountRecords[Olympiad.Shared.Models.SolutionStatus.InQueue];
    }

    private async Task UpdateCycle(System.Threading.CancellationToken cancellationToken)
    {
        while (true)
        {
            try
            {
                await Task.Delay(TimeSpan.FromSeconds(5), cancellationToken);
                cancellationToken.ThrowIfCancellationRequested();
                await Update();
            }
            catch (OperationCanceledException)
            {
                break;
            }
        }
    }

    private async Task Update()
    {
        await Logs.Log($"Updating");
        await DoInSync(async () =>
        {
            var dbRecords = (await Service
                .Solutions
                .GroupBy(s => s.Status)
                .Select(s => new { Status = s.Key, Count = s.Count() })
                .ToListAsync())
            .ToDictionary(s => s.Status, v => v.Count);
            foreach (var key in Enum.GetValues(typeof(Olympiad.Shared.Models.SolutionStatus))
            .Cast<Olympiad.Shared.Models.SolutionStatus>())
            {
                solutionCountRecords[key] = 0;
            }
            foreach (var dbRecord in dbRecords)
            {
                solutionCountRecords[dbRecord.Key] = dbRecord.Value;
            }
            var oldTime = DateTime.UtcNow - TimeSpan.FromMinutes(2);
            doneInLast10Mins = await Service
                .Solutions
                .Where(s => s.CheckedTime > oldTime)
                .CountAsync();
        });
        await Logs.Log($"Updated");
        StateHasChanged();
    }

    private async Task ReCheckAllSolutions()
    {
        await Logs.Log($"Start rechecking all solutions");
        await RecheckSolutions(db => db.Solutions.Where(s => s.Status != Olympiad.Shared.Models.SolutionStatus.CompileError));
        await Logs.Log($"Done recheck all solutions");
    }

    private async Task RecheckAllSolutions(Olympiad.Shared.Models.SolutionStatus solutionStatus)
    {
        await Logs.Log($"Start rechecking {solutionStatus}");
        await RecheckSolutions(db => db.Solutions.Where(s => s.Status == solutionStatus));
        await Logs.Log($"Done recheck work");
    }

    private async Task RecheckSolutions(Func<ApplicationDbContext, IQueryable<Models.Solutions.Solution>> solutionsSelector)
    {
        await DoInSync(() =>
            ReCheckHelper.ReCheckSolutions(
                Service,
                QueueChecker,
                solutionsSelector,
                Logs.Log
                ));
        await Update();
    }

    private System.Threading.SemaphoreSlim dbContextSemaphore = new System.Threading.SemaphoreSlim(1, 1);
    // Use it for ANY interaction with DbContext
    private async Task DoInSync(Func<Task> action)
    {
        try
        {
            await dbContextSemaphore.WaitAsync();
            await action();
        }
        finally
        {
            dbContextSemaphore.Release();
        }
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
        {
            source.Cancel();
            updateTask?.Wait(); // TODO update to .net 5, use asyncdispose
        }
    }
}
