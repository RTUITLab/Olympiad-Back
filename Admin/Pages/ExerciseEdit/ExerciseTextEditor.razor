@using System.Text.RegularExpressions
@inject IJSRuntime JS

<div class="form-group">
    <button class="btn btn-primary" @onclick="() => isShowPreview = !isShowPreview">@(isShowPreview ? "Show field" : "Show preview")</button>
    <div class="row">
        <div class="col">
            <label for="exercise-description">Task text</label>
            @if (isShowPreview)
            {
                <ExerciseTextMarkdown Markdown="@ExerciseText"></ExerciseTextMarkdown>
            }
            else
            {
                <InputTextArea id="exercise-description" class="form-control" @bind-Value="EditableText" />
            }
        </div>
        <div class="col">
            <label>Attached files</label>
            <br />
            <table class="table-bordered table">
                <thead>
                    <tr>
                        <th>Unique name</th>
                        <th>Filename</th>
                        <th>Usage example</th>
                        <th>.</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var fileRecord in files)
                    {
                        <tr>
                            <td>@fileRecord.Key</td>
                            <td>@fileRecord.Value.FileName</td>
                            @if (fileRecord.Value.MimeType.StartsWith("image"))
                            {
                                <td>@($"![][{fileRecord.Key}-{fileRecord.Value.FileName}]")</td>
                            }
                            else
                            {
                                <td>@($"[{fileRecord.Value.FileName}][{fileRecord.Key}-{fileRecord.Value.FileName}]")</td>
                            }
                            <td><button class="btn btn-danger" @onclick="() => RemoveFile(fileRecord.Key)">Del</button></td>
                        </tr>
                    }
                </tbody>
            </table>
            <label>
                Unique file ID
                <input type="text" @bind-value="newFileId" />
            </label>
            @if (!string.IsNullOrEmpty(newFileId) && !files.ContainsKey(newFileId))
            {
                <label style="margin-left: 20px">
                    Add file to exercise (500 KB max)
                    <InputFile OnChange="HandleFile" />
                </label>
            }
        </div>
    </div>

</div>
@code {
    [Parameter]
    public string ExerciseText { get; set; }
    [Parameter]
    public EventCallback<string> ExerciseTextChanged { get; set; }

    [CascadingParameter(Name = "ExerciseEditLogs")]
    public Logs Logs { get; set; }

    private ElementReference inputRef;
    private string newFileId;

    private const string filesDelimeter = "[files-block]: comment-block";
    private string _editableText;
    private string EditableText
    {
        get => _editableText;
        set
        {
            _editableText = value;
            ExerciseText = CompileExerciseText();
            ExerciseTextChanged.InvokeAsync(ExerciseText);
        }
    }

    private Dictionary<string, AttachedFile> files = new Dictionary<string, AttachedFile>();

    private bool isShowPreview = false;
    private static readonly Regex attachFileRegex = new Regex(@"^\[(?<id>.+)-(?<fileName>.+)\]: data:(?<mime>.+);base64,(?<base64>.+)", RegexOptions.Multiline);
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        files.Clear();
        if (string.IsNullOrEmpty(ExerciseText))
        {
            return;
        }
        var delimeterPosition = ExerciseText.IndexOf(filesDelimeter);
        if (delimeterPosition == -1)
        {
            Console.WriteLine("no delimeter");
            _editableText = ExerciseText;
            return;
        }
        _editableText = ExerciseText.Substring(0, delimeterPosition);
        var filesRow = ExerciseText.Substring(delimeterPosition);
        var matches = attachFileRegex.Matches(filesRow);
        foreach (var match in matches.Cast<Match>())
        {
            files[match.Groups["id"].ToString()] = new AttachedFile
            {
                MimeType = match.Groups["mime"].ToString(),
                FileName = match.Groups["fileName"].ToString(),
                Base64Content = match.Groups["base64"].ToString()
            };
        }
    }

    private void RemoveFile(string key)
    {
        files.Remove(key);
        EditableText = _editableText;
    }

    private async Task HandleFile(InputFileChangeEventArgs file)
    {
        if (file.File.Size > 512000)
        {
            await Logs.Log($"Too big file");
            return;
        }
        using var fileStream = file.File.OpenReadStream();
        using var tempBuffer = new System.IO.MemoryStream();
        await fileStream.CopyToAsync(tempBuffer);
        var base64 = Convert.ToBase64String(tempBuffer.ToArray());
        files.Add(newFileId, new AttachedFile
        {
            FileName = file.File.Name,
            MimeType = file.File.ContentType,
            Base64Content = base64
        });
        newFileId = "";
        EditableText = _editableText;
    }

    private string CompileExerciseText()
    {
        if (!files.Any())
        {
            return _editableText;
        }
        var builder = new System.Text.StringBuilder();
        builder.AppendLine(_editableText);
        builder.AppendLine(filesDelimeter);

        foreach (var file in files)
        {
            //Console.WriteLine(file.Value.MimeType);
            builder.AppendLine($"\n[{file.Key}-{file.Value.FileName}]: data:{file.Value.MimeType};base64,{file.Value.Base64Content}\n");
        }
        var result = builder.ToString();
        return result;
    }

    private class AttachedFile
    {
        public string Base64Content { get; set; }
        public string FileName { get; set; }
        public string MimeType { get; set; }
    }
}
