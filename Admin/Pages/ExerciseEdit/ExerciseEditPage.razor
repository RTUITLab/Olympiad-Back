@page "/challenges/{ChallengeId:guid}/exercises/{ExerciseId:guid}"
@page "/challenges/{ChallengeId:guid}/exercises/{ExerciseId:guid}/{DataPage:int}"

@inherits OwningComponentBase<ApplicationDbContext>

@using Microsoft.EntityFrameworkCore
@using BlazorStrap
@using Olympiad.Admin.Components.EditExercise
@using Olympiad.Services.SolutionCheckQueue

@inject NavigationManager navigationManager
@inject IQueueChecker QueueChecker

<h3>Exercise edit</h3>
<h4>@challengeName</h4>
<NavLink href=@($"challenges/{ChallengeId}/exercises")>Go to exercises list</NavLink>


@if (exercise == null)
{
    <p>Loading</p>
}
else
{

    <CascadingValue Value="logs" Name="ExerciseEditLogs">
        <EditForm Model="exercise">
            <div class="form-group">
                <label for="exercise-title">Title</label>
                <InputText id="exercise-title" class="form-control" @bind-Value="exercise.ExerciseName" />
            </div>
            <ExerciseTextEditor @bind-ExerciseText="@exercise.ExerciseTask" />
            @if (Service.Entry(exercise).State == EntityState.Modified)
            {
                <button type="submit" class="btn btn-primary" @onclick="UpdateExercise">Update</button>
            }
        </EditForm>
        <hr />
        <div class="row">
            <div class="col">
            </div>
            <div class="col">
                <button class="btn btn-warning" @onclick="RecheckExercise">Recheck exercise</button>
                <button class="btn btn-danger" @onclick="DeleteExercise">Delete</button>
            </div>
        </div>
        <EditExerciseDataGroups ExerciseId="ExerciseId" />
    </CascadingValue>
}
<Logs @ref="logs"></Logs>

@code {
    [Parameter]
    public Guid ChallengeId { get; set; }
    [Parameter]
    public Guid ExerciseId { get; set; }
    [Parameter]
    public int DataPage { get; set; }

    private Logs logs;
    private string challengeName = "Loading...";
    private Models.Exercises.Exercise exercise;


    private string GetPageLink(int pageNum)
    {
        string pageNumStr = pageNum <= 0 ? "" : pageNum.ToString();
        return $"challenges/{ChallengeId}/exercises/{ExerciseId}/{pageNumStr}";
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        challengeName = await Service.Challenges.Where(c => c.Id == ChallengeId).Select(c => c.Name).SingleOrDefaultAsync();
        exercise = await Service
            .Exercises
            .Include(e => e.ExerciseDataGroups)
            .SingleOrDefaultAsync(ex => ex.ExerciseID == ExerciseId);
        if (exercise == null)
        {
            navigationManager.NavigateTo($"challenges/{ChallengeId}/exercises");
            return;
        }
    }

    private async Task UpdateExercise()
    {
        await Service.SaveChangesAsync();
    }


    private async Task DeleteExercise()
    {
        Service.Exercises.Remove(exercise);
        await Service.SaveChangesAsync();
        navigationManager.NavigateTo($"challenges/{ChallengeId}/exercises");
    }
    private async Task RecheckExercise()
    {
        await ReCheckHelper.ReCheckSolutions(
            Service,
            QueueChecker,
            db => db.Solutions.Where(s => s.ExerciseId == ExerciseId),
            logs.Log);
        await logs.Log("Done rechecking");
    }
}
