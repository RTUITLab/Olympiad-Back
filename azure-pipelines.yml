trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

name: $(BuildID)-$(Build.SourceBranchName)

pool:
  vmImage: 'ubuntu-latest'

variables:
  ${{ if notIn(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/tags/develop') }}:
    buildImage: false
    deployService: false
    deployEnvironment: 'no'
    imageTags: 'no'
    apiServiceName: 'no'
    executorServiceName: 'no'
    controlPanelServiceName: 'no'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/tags/develop') }}:
    buildImage: true
    deployService: true
    deployEnvironment: development
    imageTags: |
      $(Build.BuildId)
      develop
    apiServiceName: olympiad-dev_api
    executorServiceName: olympiad-dev_executor
    controlPanelServiceName: 'olympiad-dev_control-panel'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    buildImage: true
    deployService: true
    deployEnvironment: production
    imageTags: |
      $(Build.BuildId)
      latest
    apiServiceName: olympiad_api
    executorServiceName: olympiad_executor
    controlPanelServiceName: 'olympiad_control-panel'


stages:
- stage: build
  displayName: build services
  jobs:
  - job: build
    strategy:
      matrix:
        api:
          cakeTarget: PublishApi
          publishPath: deploy/api
          artifactName: api-build
        executor:
          cakeTarget: PublishExecutor
          publishPath: deploy/executor
          artifactName: executor-build
        control-panel:
          cakeTarget: PublishControlPanel
          publishPath: deploy/control-panel
          artifactName: control-panel-build
        
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.0.101'
        includePreviewVersions: true
    - task: Cake@2
      displayName: build service
      env:
        BUILD_NUMBER: $(Build.BuildId)
      inputs:
        script: 'build.cake'
        target: $(cakeTarget)
        verbosity: 'Verbose'
    - publish: $(publishPath)
      artifact: $(artifactName)
      displayName: publish $(artifactName)

- stage: test
  jobs:
    - job: e2e
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: download api build
          inputs:
            artifactName: 'api-build'
            buildType: 'current'
            targetPath: 'deploy/api'
        - task: DownloadPipelineArtifact@2
          displayName: download executor build
          inputs:
            artifactName: 'executor-build'
            buildType: 'current'
            targetPath: 'deploy/executor'
        - task: DownloadPipelineArtifact@2
          displayName: download control-panel build
          inputs:
            artifactName: 'control-panel-build'
            buildType: 'current'
            targetPath: 'deploy/control-panel'

        - powershell: ./generateTestStack.ps1
          workingDirectory: ./tests/e2e
          displayName: generate test env stack file
          env:
            OLYMPIAD_SERVICE_TAG: $(Build.BuildId)
            OLYMPIAD_PRIVATE_REGISTRY_LOGIN: $(registryLogin)
            OLYMPIAD_PRIVATE_REGISTRY_PASSWORD: $(registryPassword)

        - script: docker-compose -f stack.yml build api control-panel executor
          workingDirectory: ./tests/e2e
          displayName: build test images

        - script: docker-compose -f stack.yml up -d api
          workingDirectory: ./tests/e2e
          displayName: start api

        - script: docker-compose -f stack.yml up tests
          workingDirectory: ./tests/e2e
          displayName: run tests

        - script: docker-compose -f stack.yml logs api
          workingDirectory: ./tests/e2e
          displayName: show api logs
        - script: docker-compose -f stack.yml logs executor
          workingDirectory: ./tests/e2e
          displayName: show api executor

        - publish: ./tests/e2e/out
          artifact: olympiad-e2e-test-results
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: JUnit
            testResultsFiles: '*.xml'
            searchFolder: ./tests/e2e/out
            failTaskOnFailedTests: true
- stage: packInDocker
  condition:  and(succeeded(), ${{variables.buildImage}}) 
  jobs:
  - job: pack
    strategy:
      matrix:
        api:
          imageName: rtuitlab/olympiad-api
          artifactName: api-build
        executor:
          imageName: rtuitlab/olympiad-executor
          artifactName: executor-build
        control-panel:
          imageName: rtuitlab/olympiad-control-panel
          artifactName: control-panel-build
    steps:
      - download: current
        artifact: $(artifactName)
        displayName: download $(artifactName)
      - task: Docker@2
        inputs:
          containerRegistry: 'rtuitlab connection by admin'
          repository: $(imageName)
          command: 'buildAndPush'
          Dockerfile: '$(Pipeline.Workspace)/$(artifactName)/Dockerfile'
          buildContext: '$(Pipeline.Workspace)/$(artifactName)'
          tags: ${{variables.imageTags}}

- stage: deploy
  condition: and(succeeded(), ${{variables.deployService}})
  jobs:
    - deployment: DeployApi
      displayName: Deploy api
      pool:
        vmImage: 'ubuntu-latest'
      environment: ${{variables.deployEnvironment}}
      strategy:
        runOnce:
          on:
            failure:
              steps:
                - download: none
                - task: SSH@0
                  inputs:
                    sshEndpoint: 'swarm manager'
                    runOptions: 'commands'
                    commands: 'docker service rollback ${{variables.apiServiceName}}'
                    readyTimeout: '20000'
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image rtuitlab/olympiad-api:$(Build.BuildId) ${{variables.apiServiceName}}'
                  readyTimeout: '20000'
    - deployment: DeployExecutor
      displayName: Deploy executor
      pool:
        vmImage: 'ubuntu-latest'
      environment: ${{variables.deployEnvironment}}
      strategy:
        runOnce:
          on:
            failure:
              steps:
                - download: none
                - task: SSH@0
                  inputs:
                    sshEndpoint: 'swarm manager'
                    runOptions: 'commands'
                    commands: 'docker service rollback ${{variables.executorServiceName}}'
                    readyTimeout: '20000'
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image rtuitlab/olympiad-executor:$(Build.BuildId) ${{variables.executorServiceName}}'
                  readyTimeout: '20000'
    - deployment: DeployControlPanel
      displayName: Deploy control panel
      pool:
        vmImage: 'ubuntu-latest'
      environment: ${{variables.deployEnvironment}}
      strategy:
        runOnce:
          on:
            failure:
              steps:
                - download: none
                - task: SSH@0
                  inputs:
                    sshEndpoint: 'swarm manager'
                    runOptions: 'commands'
                    commands: 'docker service rollback ${{variables.controlPanelServiceName}}'
                    readyTimeout: '20000'
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image rtuitlab/olympiad-control-panel:$(Build.BuildId) ${{variables.controlPanelServiceName}}'
                  readyTimeout: '20000'
