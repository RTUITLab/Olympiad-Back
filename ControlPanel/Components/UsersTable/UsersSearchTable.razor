@using PublicAPI.Requests
@using PublicAPI.Requests.Account
@using PublicAPI.Responses
@using PublicAPI.Responses.Users

@inject IControlPanelApiService ControlPanelApiService
@inject ModalService ModalService

<Space Direction="DirectionVHType.Vertical" Style="width: 100%">
    <SpaceItem>
        <Search Placeholder="Поиск" EnterButton="true" @bind-Value="@searchText" OnSearch="UpdateSearch" />
    </SpaceItem>
    <SpaceItem>
        <ShowUsersTable TSelection="UsersSearchModel" Selection="Selection" SelectionChanged="HandleSelectionChanged" GetUsersFunction="GetUsers">
            <TitleTemplate>
                @foreach (var claim in usersSelectionModel.Claims)
                {
                    <Tag @key="claim" Closable OnClose=@(() => RemoveClaimSearch(claim))>@claim.Type : @claim.Value</Tag>
                }
                <Tooltip Title=@("Искать по свойству пользователя")>
                    <Button Icon="@IconType.Outline.Plus" Size="@ButtonSize.Small" OnClick="AddClaimSearch" />
                </Tooltip>
            </TitleTemplate>
        </ShowUsersTable>
    </SpaceItem>
</Space>



@code {

    [Parameter]
    public UsersSearchModel? Selection { get; set; }
    [Parameter]
    public EventCallback<UsersSearchModel> SelectionChanged { get; set; }

    private UsersSearchModel usersSelectionModel = new UsersSearchModel();
    private string? searchText;


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Selection is not null && Selection != usersSelectionModel)
        {
            usersSelectionModel = Selection;
        }
        searchText = usersSelectionModel.Match;
    }

    private async Task UpdateSearch()
    {
        usersSelectionModel.Match = searchText;
        await UpdateSelectionModel(usersSelectionModel);
    }

    private async Task HandleSelectionChanged(UsersSearchModel searchModel)
    {
        await UpdateSelectionModel(searchModel);
    }

    private async Task AddClaimSearch()
    {
        var selectClaimRef = await ModalService.CreateModalAsync<SelectClaimFeedback, IReadOnlyCollection<ClaimRequest>?, ClaimRequest?>(
            new ModalOptions
                {
                    Title = "Выберите свойство пользователя"
                },
            usersSelectionModel.Claims);
        selectClaimRef.OnOk = async r =>
        {
            var newClaims = usersSelectionModel.Claims.Append(r).ToList().AsReadOnly();
            await UpdateSelectionModel(usersSelectionModel with { Claims = newClaims! });
        };
    }

    private async Task RemoveClaimSearch(ClaimRequest claimToRemove)
    {
        var newClaims = (usersSelectionModel.Claims ?? Enumerable.Empty<ClaimRequest>()).Where(r => r != claimToRemove).ToList().AsReadOnly();
        await UpdateSelectionModel(usersSelectionModel with { Claims = newClaims });
    }

    private Task<ListResponseWithMatch<UserInfoResponse>> GetUsers(UsersSearchModel searchModel)
    {
        return ControlPanelApiService.SearchUsers(searchModel.Match, searchModel.Limit, searchModel.Offset, searchModel.Claims);
    }

    private async Task UpdateSelectionModel(UsersSearchModel searchModel)
    {
        if (SelectionChanged.HasDelegate)
        {
            await SelectionChanged.InvokeAsync(searchModel);
        }
    }

    public record UsersSearchModel : UsersPartSelectionModel
    {
        public IReadOnlyList<ClaimRequest> Claims { get; set; } = Enumerable.Empty<ClaimRequest>().ToList().AsReadOnly();
        public string? Match { get; set; }
    }
}
