@using PublicAPI.Requests
@using PublicAPI.Responses
@using PublicAPI.Responses.Users

@inject IControlPanelApiService ControlPanelApiService


<Space Direction="DirectionVHType.Vertical" Style="width: 100%">
    <SpaceItem>
        <Search Placeholder="Поиск" EnterButton="true" @bind-Value="@searchText" OnSearch="UpdateSearch" />
    </SpaceItem>
    <SpaceItem>
        <ShowUsersTable TSelection="UsersSearchModel" Selection="Selection" SelectionChanged="HandleSelectionChanged" GetUsersFunction="GetUsers" />
    </SpaceItem>
</Space>



@code {

    [Parameter]
    public UsersSearchModel? Selection { get; set; }
    [Parameter]
    public EventCallback<UsersSearchModel> SelectionChanged { get; set; }

    private UsersSearchModel usersSelectionModel = new UsersSearchModel();
    private string? searchText;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Selection is not null && Selection != usersSelectionModel)
        {
            usersSelectionModel = Selection;
        }
        searchText = usersSelectionModel.Match;
    }

    private async Task UpdateSearch()
    {
        usersSelectionModel.Match = searchText;
        await UpdateSelectionModel(usersSelectionModel);
    }

    private async Task HandleSelectionChanged(UsersSearchModel searchModel)
    {
        await UpdateSelectionModel(searchModel);
    }

    private Task<ListResponseWithMatch<UserInfoResponse>> GetUsers(UsersSearchModel searchModel)
    {
        return ControlPanelApiService.SearchUsers(searchModel.Match, searchModel.Limit, searchModel.Offset);
    }

    private async Task UpdateSelectionModel(UsersSearchModel searchModel)
    {
        if (SelectionChanged.HasDelegate)
        {
            await SelectionChanged.InvokeAsync(searchModel);
        }
    }

    public record UsersSearchModel : UsersPartSelectionModel
    {
        public string? Match { get; set; }
    }
}
