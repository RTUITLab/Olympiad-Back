@typeparam TSelection where TSelection : UsersPartSelectionModel
@using PublicAPI.Requests
@using PublicAPI.Responses
@using PublicAPI.Responses.Users
@using System.Threading

@inject IJSRuntime JS
@inject MessageService MessageService
@inject ILogger<ShowUsersTable<TSelection>> Logger

<Table DataSource="usersSource"
       Loading="loading"
       Total="loadedData?.Total ?? 0"
       @bind-PageSize="usersPartSelectionModel.Limit"
       @bind-PageIndex="PageIndex"
       TItem="UserInfoResponse"
       ScrollY="@TableScrollY"
       OnChange="HandleChange"
       Bordered
       Size="TableSize">
    <TitleTemplate>
        @if (TitleTemplate is not null)
        {
            @TitleTemplate(loadedData)
        }
    </TitleTemplate>
    <ChildContent>
        <Column @bind-Field="context.StudentId" Title="Идентификатор">
            <NavLink href="@($"users/{context.Id}")">@context.StudentId</NavLink>
        </Column>
        <Column @bind-Field="context.FirstName" Title="Имя"></Column>
        <Column @bind-Field="context.Email"></Column>
        @if (UserExtra is not null)
        {
            <ActionColumn Width="5em">
                @UserExtra(context)
            </ActionColumn>
        }
    </ChildContent>
    <FooterTemplate>
        <Row Justify="space-between" Align="center">
            <AntDesign.Col>
                @CounterLabel: <Text Keyboard>@(loadedData?.Total.ToString() ?? "Загрузка")</Text>
            </AntDesign.Col>
            @if (FooterExtra is not null)
            {
                <AntDesign.Col>
                    @FooterExtra(loadedData)
                </AntDesign.Col>
            }
        </Row>
    </FooterTemplate>
</Table>


@code {
    [Parameter]
    public Func<TSelection, Task<ListResponseWithMatch<UserInfoResponse>>>? GetUsersFunction { get; set; }
    [Parameter]
    public TSelection? Selection { get; set; }
    [Parameter]
    public EventCallback<TSelection> SelectionChanged { get; set; }
    [Parameter]
    public string TableScrollY { get; set; } = "50vh";
    [Parameter]
    public TableSize? TableSize { get; set; } = TableSize.Middle;
    [Parameter]
    public RenderFragment<ListResponseWithMatch<UserInfoResponse>?>? TitleTemplate { get; set; }
    [Parameter]
    public RenderFragment<UserInfoResponse>? UserExtra { get; set; }
    [Parameter]
    public RenderFragment<ListResponseWithMatch<UserInfoResponse>?>? FooterExtra { get; set; }

    [Parameter]
    public string CounterLabel { get; set; } = "Найдено";

    private IEnumerable<UserInfoResponse>? usersSource => loadedData?.Data;
    private ListResponseWithMatch<UserInfoResponse>? loadedData;
    private bool loading;
    private TSelection? lastLoadedSelectionModel;
    private UsersPartSelectionModel usersPartSelectionModel = new UsersPartSelectionModel();

    private int PageIndex
    {
        get => (usersPartSelectionModel.Offset / usersPartSelectionModel.Limit) + 1;
        set
        {
            usersPartSelectionModel.Offset = usersPartSelectionModel.Limit * (value - 1);
        }

    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var needLoadData = false;
        if (Selection is not null && Selection != usersPartSelectionModel)
        {
            usersPartSelectionModel = Selection;
            needLoadData = true;
        }
        if (Selection != lastLoadedSelectionModel)
        {
            needLoadData = true;
        }
        if (lastLoadedSelectionModel is null)
        {
            needLoadData = true;
        }
        if (needLoadData)
        {
            await LoadData();
        }
    }

    private async Task HandleChange()
    {
        await LoadData();
        if (SelectionChanged.HasDelegate && Selection is not null)
        {
            await SelectionChanged.InvokeAsync(Selection with { Limit = usersPartSelectionModel.Limit, Offset = usersPartSelectionModel.Offset });
        }
    }
    public async Task RefreshTable()
    {
        await LoadData(true);
        StateHasChanged();
    }

    private SemaphoreSlim loadDataSemaphore = new SemaphoreSlim(1, 1);
    private async Task LoadData(bool force = false)
    {
        if (GetUsersFunction is null)
        {
            Logger.LogWarning("No {Function}", nameof(GetUsersFunction));
            await MessageService.Warning("Неверное использование компонента.");
            return;
        }
        if (loadDataSemaphore.CurrentCount == 0)
        {
            Logger.LogWarning("Semaphore collision");
            return;
        }
        await loadDataSemaphore.WaitAsync();
        try
        {
            var selectionToLoad = usersPartSelectionModel as TSelection;
            if (selectionToLoad is null)
            {
                Logger.LogWarning("No selection to load. TargetType: {TargetType} FoundType {FoundType}", typeof(TSelection).Name, usersPartSelectionModel?.GetType().Name);
                return;
            }
            if (lastLoadedSelectionModel == selectionToLoad && !force)
            {
                return;
            }
            loading = true;
            StateHasChanged();

            loadedData = await GetUsersFunction(selectionToLoad);
            if (selectionToLoad.Offset >= loadedData?.Total && loadedData?.Total > 0)
            {
                selectionToLoad = selectionToLoad with { Offset = 0 };
                loadedData = await GetUsersFunction(selectionToLoad);
            }
            lastLoadedSelectionModel = selectionToLoad with { };
            await SelectionChanged.InvokeAsync(lastLoadedSelectionModel with { });
        }
        finally
        {
            loading = false;
            loadDataSemaphore.Release();
        }
    }
}
