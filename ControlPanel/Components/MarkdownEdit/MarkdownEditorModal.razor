@{
    RenderFragment footer =
    @<Button Type="@ButtonType.Primary" OnClick="Hide">Закрыть</Button>
    ;
}

<Modal TitleTemplate="@SafeTitleTemplate"
       Visible="show"
       Width="@("80vw")"
       Footer="footer"
       OnCancel="Hide">
    <Row Gutter="20" Style="height: 60vh">
        <AntDesign.Col Span="12" Style="max-height: 100%;">
            <TextArea Style="height: 100%"
                      @bind-Value="@Content"
                      OnChange="UpdateValue" />
        </AntDesign.Col>
        <AntDesign.Col Span="12" Style="max-height: 100%; overflow: auto;">
            @Output
        </AntDesign.Col>
    </Row>
    <Row Justify="space-between">
        <AntDesign.Col>
            <Text Type="secondary">
                Используется язык <a href="https://gist.github.com/fomvasss/8dd8cd7f88c67a4e3727f9d39224a84c" target="_blank">Markdown</a>
            </Text>
        </AntDesign.Col>
        <AntDesign.Col>
            <Text Type="warning">
                Не забудьте сохранить изменения!
            </Text>
        </AntDesign.Col>
    </Row>
</Modal>
@code {

    [Parameter]
    public string? Content { get; set; }
    [Parameter]
    public EventCallback<string?> ContentChanged { get; set; }

    [Parameter]
    public RenderFragment? TitleTemplate { get; set; }
    // TODO: null operator
    private RenderFragment SafeTitleTemplate
    {
        get
        {
            if (TitleTemplate is null)
            {
                return
    @<Template></Template>
    ;
            }
            else
            {
                return TitleTemplate;
            }
        }
    }

    [CascadingParameter]
    public MarkupString Output { get; set; }

    private bool show;
    public void Show()
    {
        show = true;
        Task.Delay(150).ContinueWith(_ => StateHasChanged());
    }
    public void Hide()
    {
        show = false;
    }

    private Task UpdateValue()
    {
        return ContentChanged.InvokeAsync(Content);
    }
    }
