@using System.IO
@inject IJSRuntime JS

@{
    RenderFragment footer =
    @<Template>
        <Space Direction="DirectionVHType.Vertical">
            <SpaceItem>
                <Text Type="warning">
                    Не забудьте сохранить изменения!
                </Text>
            </SpaceItem>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="Hide">Закрыть</Button>
            </SpaceItem>
        </Space>
    </Template>
    ;
    RenderFragment title =
    @<Template>
        <Row Justify="space-between">
            <AntDesign.Col @ref="titleColElement">
                @if (TitleTemplate is not null)
                    {
                        @TitleTemplate
                    }
                </AntDesign.Col>
                <AntDesign.Col>
                    <Dropdown Trigger="@(new Trigger[] { Trigger.Click })"
                      OnClick='e => { Console.WriteLine("Dropdown button clicked."); }'
                      Placement="Placement.BottomRight">
                        <Overlay>
                            <Menu SelectedKeys="Array.Empty<string>()">
                                <MenuItem>
                                    <Button Icon="@IconType.Outline.Download" OnClick="DownloadExerciseText">
                                        Скачать текст задания
                                    </Button>
                                </MenuItem>
                                <MenuItem>
                                    <Button Icon="@IconType.Outline.Upload" OnClick="() => JS.Click(uploadMdRef?.Element)">Загрузить из файла</Button>
                                    <InputFile @ref="uploadMdRef" style="display: none" OnChange="UploadMdFileSelected" accept=".md" />
                                </MenuItem>
                            </Menu>
                        </Overlay>
                        <Unbound>
                            <Button RefBack=@context Icon="@IconType.Outline.Ellipsis"></Button>
                        </Unbound>
                    </Dropdown>
                </AntDesign.Col>
            </Row>
        </Template>;
}

<Modal TitleTemplate="title"
       Visible="show"
       Width="@("80vw")"
       Footer="footer"
       OnCancel="Hide"
       Closable="false">
    <Row Gutter="20" Style="height: 60vh">
        <AntDesign.Col Span="12" Style="max-height: 100%; display: flex; flex-direction: column;">
            <TextArea Style="height: 100%; resize: none; margin-bottom: 4px;"
                      @bind-Value="@Content"
                      OnChange="UpdateValue" />
            <AttachmentManager MaxHeigth="20vh"/>
            <Text Type="secondary">
                Используется язык <a href="https://gist.github.com/fomvasss/8dd8cd7f88c67a4e3727f9d39224a84c" target="_blank">Markdown</a>
            </Text>
        </AntDesign.Col>
        <AntDesign.Col Span="12" Style="max-height: 100%; overflow: auto;">
            @Output
        </AntDesign.Col>
    </Row>
</Modal>
@code {

    [Parameter]
    public string? Content { get; set; }
    [Parameter]
    public EventCallback<string?> ContentChanged { get; set; }

    [Parameter]
    public RenderFragment? TitleTemplate { get; set; }

    private InputFile? uploadMdRef;
    private AntDesign.Col? titleColElement;

    private async Task DownloadExerciseText()
    {
        if (titleColElement is null || Content is null)
        {
            return;
        }
        await JS.DownloadFile($"{await JS.GetInnerText(titleColElement.Ref)}.md", Content);
    }

    private async Task UploadMdFileSelected(InputFileChangeEventArgs files)
    {
        using var reader = new StreamReader(files.File.OpenReadStream(files.File.Size));
        Content = await reader.ReadToEndAsync();
        await UpdateValue();
    }


    [CascadingParameter]
    public MarkupString Output { get; set; }

    private bool show;
    public void Show()
    {
        show = true;
        Task.Delay(150).ContinueWith(_ => StateHasChanged());
    }
    public void Hide()
    {
        show = false;
    }

    private Task UpdateValue()
    {
        return ContentChanged.InvokeAsync(Content);
    }
    }
