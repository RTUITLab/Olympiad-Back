@using Ganss.XSS
@using Markdig
<Tabs DefaultActiveKey="area" @bind-ActiveKey="activeTab" Type="@TabType.Card" OnChange="OnChangeTab">
    <TabPane Key="area">
        <TabTemplate>
            <Tooltip Title="@("Редактирование")">
                <Icon Type="@IconType.Outline.Edit" Style="margin-right: 0;" />
            </Tooltip>
        </TabTemplate>
        <ChildContent>
            <TextArea MinRows="5"
                      MaxRows="25"
                      ShowCount
                      MaxLength="MaxLength"
                      AutoSize
                      @bind-Value="@Value"
                      OnChange="UpdateValue" />
        </ChildContent>
    </TabPane>
    <TabPane Key="view">
        <TabTemplate>
            <Tooltip Title="@("Предпросмотр")">
                <Icon Type="@IconType.Outline.Eye" Style="margin-right: 0;" />
            </Tooltip>
        </TabTemplate>
        <ChildContent>
            <Card>
                @ExerciseTaskPreview
            </Card>
        </ChildContent>
    </TabPane>
    <TabPane Key="modal">
        <TabTemplate>
            <Tooltip Title="@("Открыть редактор")">
                <Icon Type="@IconType.Outline.Form" Style="margin-right: 0;" />
            </Tooltip>
        </TabTemplate>
    </TabPane>
</Tabs>
<CascadingValue Value="ExerciseTaskPreview" Name="@(nameof(ExerciseTaskPreview))">
    <MarkdownEditorModal Content="@Value"
                         MaxLength="MaxLength"
                         ContentChanged="v => ValueChanged.InvokeAsync(Value = v)"
                         TitleTemplate="@TitleTemplate"
                         @ref="contentMarkdownEditor" />
</CascadingValue>

@code {
    private MarkdownEditorModal? contentMarkdownEditor;
    private string activeTab = "area";
    private string prevActiveTab = "area";

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    [Parameter]
    public int MaxLength { get; set; } = 100;

    /// <summary>
    /// WIll be used in Editor Title
    /// </summary>
    [Parameter]
    public RenderFragment? TitleTemplate { get; set; }

    private void OnChangeTab(string newKey)
    {
        if (newKey == "modal")
        {
            contentMarkdownEditor?.Show();
            activeTab = prevActiveTab;
        }
        else
        {
            prevActiveTab = newKey;
        }
    }

    static MarkdownTextArea()
    {
        htmlSanitizer = new HtmlSanitizer();
        htmlSanitizer.AllowedAttributes.Add("class");
        htmlSanitizer.AllowedSchemes.Add("data");
    }

    private static MarkdownPipeline pipeline = new MarkdownPipelineBuilder().Build();
    private static HtmlSanitizer htmlSanitizer;

    private List<MarkupString>? parsedRows;
    private string? renderedValue;
    // Optimize rendering editable content
    private RenderFragment ExerciseTaskPreview =>
    @<Template>
        <div class="markdown-editor">
            @foreach (var line in parsedRows ?? Enumerable.Empty<MarkupString>())
                {
                    @line
                }
            </div>
        </Template>
    ;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (!string.IsNullOrWhiteSpace(Value) && renderedValue != Value)
        {
            var html = Markdown.ToHtml(Value, pipeline);
            Console.WriteLine(html);
            var sanitizedHtml = htmlSanitizer.Sanitize(html);
            parsedRows = sanitizedHtml.Split('\n').Select(r => new MarkupString(r)).ToList();
            renderedValue = Value;
        }
    }

    private Task UpdateValue()
    {
        return ValueChanged.InvokeAsync(Value);
    }

}