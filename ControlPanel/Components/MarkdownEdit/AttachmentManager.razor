@using ByteSizeLib
@using PublicAPI.Responses
@inject IJSRuntime JS
@inject NotificationService NotificationService
@inject MessageService MessageService
@inject HttpClient HttpClient
@if (AttachmentsProvider is null)
{
    //Stop rendering
    return;
}
<Collapse>
    <Panel>
        <HeaderTemplate>
            <Badge Count="@attachments?.Count"
                   Style="background-color: #8c8c8c;"
                   Offset="(20, 8)">
                Файлы
                @if (loading)
                {
                    <Badge Status="processing" />
                }
            </Badge>
        </HeaderTemplate>
        <ExtraTemplate>
            <Button Icon="@IconType.Outline.Plus" Style="height: 1.5em;" OnClick="() => JS.Click(uploadAttachmentRef?.Element)"></Button>
            <InputFile @ref="uploadAttachmentRef" style="display: none" OnChange="UploadFileSelected" />
        </ExtraTemplate>
        <ChildContent>
            <AntList DataSource="attachments"
                     Context="attachment"
                     Loading="loading"
                     Style="@($"max-height: {MaxHeigth}; overflow: auto;")">
                <ListItem>
                    <ChildContent>
                        <Text Ellipsis>
                            <Icon Type="@GetIconType(attachment)" />
                            <Text Style="font-size: 12px">
                                <a href="@AttachmentsProvider?.GetAttachmentUrl(attachment.FileName)" target="_blank">@attachment.FileName</a>
                            </Text>
                        </Text>
                    </ChildContent>
                    <Extra>
                        <DropdownButton OnClick="() => CopyAttachmentMarkdownToClipboard(attachment)" Style="margin-right: 4px">
                            <Overlay>
                                <Menu SelectedKeys="Array.Empty<string>()">
                                    <MenuItem>
                                        <Button Icon="@IconType.Outline.Download" OnClick="() => DownloadAttachment(attachment.FileName)">Скачать</Button>
                                    </MenuItem>
                                    <MenuItem>
                                        <Button Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteAttachment(attachment.FileName)">Удалить</Button>
                                    </MenuItem>
                                </Menu>
                            </Overlay>
                            <ChildContent>
                                <Tooltip Title="@("Скопировать markdown для использования в разметке")">
                                    <Icon Type="@IconType.Outline.Copy" />
                                </Tooltip>
                            </ChildContent>
                        </DropdownButton>
                    </Extra>
                </ListItem>
            </AntList>

        </ChildContent>
    </Panel>
</Collapse>

@code {
    [CascadingParameter]
    public IAttachmentsProvider? AttachmentsProvider { get; set; }
    [Parameter]
    public string? MaxHeigth { get; set; }
    private bool loading;
    private List<AttachmentResponse>? attachments;
    private InputFile? uploadAttachmentRef;

    private string GetIconType(AttachmentResponse attachmentResponse)
    {
        switch (attachmentResponse)
        {
            case AttachmentResponse r when r.FileName.EndsWith(".pdf", StringComparison.InvariantCultureIgnoreCase):
                return IconType.Outline.FilePdf;
            case AttachmentResponse r
                when r.FileName.EndsWith(".jpg", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".jpeg", StringComparison.InvariantCultureIgnoreCase):
                return IconType.Outline.FileJpg;
            case AttachmentResponse r when r.FileName.EndsWith(".gif", StringComparison.InvariantCultureIgnoreCase):
                return IconType.Outline.FileGif;
            case AttachmentResponse r
                when r.FileName.EndsWith(".xlsx", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".xls", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".xlsb", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".xlsm", StringComparison.InvariantCultureIgnoreCase):
                return IconType.Outline.FileExcel;
            case AttachmentResponse r
                when r.FileName.EndsWith(".docx", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".doc", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".docm", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".dotx", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".dotm", StringComparison.InvariantCultureIgnoreCase):
                return IconType.Outline.FileWord;
            case AttachmentResponse r
                when r.FileName.EndsWith(".pptx", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".ppt", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".pptm", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".potm", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".potx", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".ppam", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".ppsx", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".ppsm", StringComparison.InvariantCultureIgnoreCase)
                  || r.FileName.EndsWith(".pps", StringComparison.InvariantCultureIgnoreCase):
                return IconType.Outline.FilePpt;
            case AttachmentResponse r
                when r.FileName.EndsWith(".md", StringComparison.InvariantCultureIgnoreCase):
                return IconType.Outline.FileMarkdown;
            case AttachmentResponse r
                when r.MimeType.StartsWith("text"):
                return IconType.Outline.FileText;
            case AttachmentResponse r
                when r.MimeType.StartsWith("image"):
                return IconType.Outline.FileImage;
            case AttachmentResponse r
                when r.MimeType.StartsWith("video"):
                return IconType.Outline.VideoCamera;
            default: return IconType.Outline.File;
        }
    }


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadList();
    }

    private async Task LoadList()
    {
        if (AttachmentsProvider is null)
        {
            return;
        }
        loading = true;
        try
        {
            attachments = await AttachmentsProvider.GetAttachments();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task UploadFileSelected(InputFileChangeEventArgs files)
    {
        var fileSize = ByteSize.FromBytes(files.File.Size);
        if (fileSize > AttachmentLimitations.MaxAttachmentSize)
        {
            await NotificationService.Open(new NotificationConfig
                {
                    Message = "Слишком большой файл",
                    Description = $"{files.File.Name} Слишком большой ({fileSize:0.##}). Максимально возможный размер файла: {AttachmentLimitations.MaxAttachmentSize:0.##}",
                    NotificationType = NotificationType.Error
                });
            return;
        }
        if (string.IsNullOrEmpty(files.File.ContentType))
        {
            await NotificationService.Open(new NotificationConfig
                {
                    Message = "Неподдерживаемый файл",
                    Description = $"Данный формат ({System.IO.Path.GetExtension(files.File.Name)} {files.File.ContentType}) файлов на данный момент не поддерживается",
                    NotificationType = NotificationType.Warning
                });
            return;
        }
        if (AttachmentsProvider is null)
        {
            return;
        }
        loading = true;
        try
        {
            var url = await AttachmentsProvider.GetUploadUrl(files.File.Name, files.File.Size, files.File.ContentType);
            var message = new HttpRequestMessage(HttpMethod.Put, url);
            message.Headers.Add("x-amz-acl", "public-read");
            message.Content = new StreamContent(files.File.OpenReadStream(files.File.Size));
            message.Content.Headers.Add("Content-Type", files.File.ContentType);
            await HttpClient.SendAsync(message);
        }
        finally
        {
            loading = false;
        }
        await LoadList();
    }

    private async Task CopyAttachmentMarkdownToClipboard(AttachmentResponse attachment)
    {
        if (AttachmentsProvider is null)
        {
            return;
        }
        await JS.CopyTextToClipboard(
            $"{(attachment.MimeType.StartsWith("image") ? "!" : "")}[{attachment.FileName}]({AttachmentsProvider.GetAttachmentUrl(attachment.FileName)})");
        await MessageService.Success("Разметка скопирована в буфер обмена");
    }

    private async Task DownloadAttachment(string fileName)
    {
        await JS.DownloadFileByUrl(fileName, AttachmentsProvider?.GetAttachmentUrl(fileName));
    }
    private async Task DeleteAttachment(string fileName)
    {
        if (AttachmentsProvider is null)
        {
            return;
        }
        await AttachmentsProvider.DeleteAttachment(fileName);
        await LoadList();
    }
    }
