@using PublicAPI.Responses
@using PublicAPI.Responses.Users
@using System.Threading

@inject IControlPanelApiService ControlPanelApiService


<Space Direction="DirectionVHType.Vertical" Style="width: 100%">
    <SpaceItem>
        <Search Placeholder="Поиск" EnterButton="true" @bind-Value="@usersSelectionModel.Match" OnSearch="HandleChange" />
    </SpaceItem>
    <SpaceItem>
        <Table DataSource="usersSource"
               Loading="loading"
               Total="loadedData?.Total ?? 0"
               @bind-PageSize="usersSelectionModel.PageSize"
               @bind-PageIndex="usersSelectionModel.PageIndex"
               TItem="UserInfoResponse"
               OnChange="HandleChange">
            <TitleTemplate>
                Найдено: @(loadedData?.Total.ToString() ?? "Заггрузка")
            </TitleTemplate>
            <ChildContent>
                <Column @bind-Field="context.StudentId" Title="Идентификатор" Sortable>
                    <NavLink href="@($"users/{context.Id}")">@context.StudentId</NavLink>
                </Column>
                <Column @bind-Field="context.FirstName" Title="Имя" Sortable></Column>
                <Column @bind-Field="context.Email" Sortable></Column>
            </ChildContent>
        </Table>
    </SpaceItem>
</Space>



@code {
    private UsersSelectionModel usersSelectionModel = new UsersSelectionModel();

    [Parameter]
    public UsersSelectionModel Selection { get; set; }
    [Parameter]
    public EventCallback<UsersSelectionModel> SelectionChanged { get; set; }


    private IEnumerable<UserInfoResponse>? usersSource => loadedData?.Data;
    private ListResponseWithMatch<UserInfoResponse>? loadedData;
    private bool loading;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Selection is not null && Selection != usersSelectionModel)
        {
            usersSelectionModel = Selection;
            await LoadData();
        }
    }

    private async Task HandleChange()
    {
        if (SelectionChanged.HasDelegate)
        {
            await SelectionChanged.InvokeAsync(usersSelectionModel);
        }
        await LoadData();
    }

    private SemaphoreSlim loadDataSemaphore = new SemaphoreSlim(1, 1);
    private async Task LoadData()
    {
        await loadDataSemaphore.WaitAsync();
        loading = true;
        try
        {
            var limit = usersSelectionModel.PageSize;
            var pageIndexToLoad = usersSelectionModel.PageIndex;

            var offset = (pageIndexToLoad - 1) * limit;

            if (limit == loadedData?.Limit && offset == loadedData?.Offset && usersSelectionModel.Match == loadedData?.Match)
            {
                return;
            }

            loadedData = await ControlPanelApiService.SearchUsers(usersSelectionModel.Match, limit, offset);
            if (offset >= loadedData?.Total && loadedData?.Total > 0)
            {
                offset = 0;
                usersSelectionModel.PageIndex = 1;
                loadedData = await ControlPanelApiService.SearchUsers(usersSelectionModel.Match, limit, offset);
            }
        }
        finally
        {
            loading = false;
            loadDataSemaphore.Release();
        }
    }

    public class UsersSelectionModel
    {
        private int pageIndex = 1;
        public int PageIndex
        {
            get => pageIndex;
            set
            {
                if (value < 1)
                {
                    value = 1;
                }
                pageIndex = value;
            }
        }
        private int pageSize = 50;
        public int PageSize
        {
            get => pageSize;
            set
            {
                if (value < 1)
                {
                    value = 50;
                }
                else if (value > 200)
                {
                    value = 200;
                }
                pageSize = value;
            }
            
        }
        public string? Match { get; set; }
    }
}
