@page "/results/{ChallengeId:guid}"
@attribute [Authorize(Roles = RoleNames.ADMIN)]

@using PublicAPI.Responses
@using PublicAPI.Responses.Challenges
@using Olympiad.ControlPanel.Pages.Challenges.Edit.Components
@using PublicAPI.Responses.Challenges.Analytics
@using PublicAPI.Responses.Exercises


@inject MessageService MessageService
@inject NavigationManager NavigationManager
@inject IChallengesApi ChallengesApi
@inject IExercisesApi ExercisesApi

<PageHeader Title="@(challengeResponse?.Name ?? "Загрузка...")">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem Href="results">
                Результаты
            </BreadcrumbItem>
            <BreadcrumbItem>
                @(challengeResponse?.Name ?? "Загрузка...")
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
</PageHeader>
<Space Direction="DirectionVHType.Vertical" Style="width: 100%">
    <SpaceItem>
        <Search Placeholder="Поиск" EnterButton="true" @bind-Value="@Match" OnSearch="HandleChange" />
        <Table DataSource="userResults?.Data"
               Loading="loading"
               Total="userResults?.Total ?? 0"
               @bind-PageIndex="PageIndex"
               @bind-PageSize="PageSize"
               ScrollX="@(((userResults?.Data.Count ?? 0) * 130).ToString())"
               TItem="UserChallengeResultsResponse"
               OnChange="HandleChange">
            <ChildContent>

                <Column Title="Идентификатор" TData="string" Fixed="left" Width="150">
                    @*<NavLink href="@($"results/{ChallengeId}/user/{context.User.Id}")">@context.User.StudentId</NavLink>*@
                    @context.User.StudentId
                </Column>
                @foreach (var exercise in exercises ?? Enumerable.Empty<ExerciseCompactResponse>())
                {
                    <Column TData="string" Width="130">
                        <TitleTemplate>
                            @exercise.Name (@exercise.Score)
                        </TitleTemplate>
                        <ChildContent>
                            @if (context.Scores.ContainsKey(exercise.Id.ToString()))
                            {
                                @context.Scores[exercise.Id.ToString()]
                            }
                        </ChildContent>
                    </Column>
                }
                <Column Title="Имя" TData="string" Width="120" Fixed="right">@context.User.FirstName</Column>
                <Column Title="Баллы" Field="context.TotalScore" Width="100" Fixed="right" />
            </ChildContent>
            <FooterTemplate>
            </FooterTemplate>
        </Table>
    </SpaceItem>
</Space>

@code {
    [Parameter]
    public Guid ChallengeId { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public string? Match { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public int PageIndex { get; set; } = 1;

    [SupplyParameterFromQuery]
    [Parameter]
    public int PageSize { get; set; } = 50;

    private bool loading = true;

    private ChallengeResponse? challengeResponse;
    private ListResponse<UserChallengeResultsResponse>? userResults;
    private List<ExerciseCompactResponse>? exercises;


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            challengeResponse = await ChallengesApi.GetChallengeAsync(ChallengeId);
            exercises = await ExercisesApi.GetExercisesAsync(ChallengeId);
        }
        catch
        {
            GoToResults();
            await MessageService.Warn("Соревнование не найдено");
        }
    }

    private async Task HandleChange()
    {
        if (PageSize < 1)
        {
            PageSize = 50;
        }
        if (PageIndex < 1)
        {
            PageIndex = 1;
        }
        if (PageSize > 200)
        {
            PageSize = 200;
        }
        var newUrl = CalcCurrentUrl();
        if (NavigationManager.Uri != newUrl)
        {
            NavigationManager.NavigateTo(newUrl);
        }
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            var limit = PageSize < 1 ? 50 : PageSize;
            var pageIndexToLoad = PageIndex < 1 ? 1 : PageIndex;
            var offset = (pageIndexToLoad - 1) * limit;
            userResults = await ChallengesApi.GetUserResultsForChallenge(ChallengeId, Match, offset, limit);
        }
        finally
        {
            loading = false;
        }
    }

    private void GoToResults()
    {
        NavigationManager.NavigateTo("results");
    }

    private string CalcCurrentUrl()
    {
        var queryParams = new Dictionary<string, object?>
        {
            {nameof(PageIndex), PageIndex <= 1 ? null : PageIndex},
            {nameof(PageSize), PageSize == 50 ? null : PageSize},
            {nameof(Match), Match},
        };
        return NavigationManager.GetUriWithQueryParameters(queryParams);
    }
}
