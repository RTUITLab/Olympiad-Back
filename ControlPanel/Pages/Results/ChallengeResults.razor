@page "/results/{ChallengeId:guid}"
@attribute [Authorize(Roles = RoleNames.RESULTS_VIEWER)]


@using PublicAPI.Responses
@using PublicAPI.Responses.Challenges
@using Olympiad.ControlPanel.Pages.Challenges.Edit.Components
@using PublicAPI.Responses.Challenges.Analytics
@using PublicAPI.Responses.ExerciseTestData
@using System.Threading


@inject MessageService MessageService
@inject NavigationManager NavigationManager
@inject IChallengesApi ChallengesApi
@inject IExercisesApi ExercisesApi
@inject ChallengeTotalReportCreator ChallengeTotalReportCreator
<PageTitle>@ChallengeName</PageTitle>
<PageHeader Title="@ChallengeName">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem Href="results">
                Результаты
            </BreadcrumbItem>
            <BreadcrumbItem>
                @ChallengeName
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
    <PageHeaderExtra>
        <SolutionsReportsGenerator ButtonText="Персональные отчеты"
                                   ChallengeId="ChallengeId"
                                   ChallengeName="@ChallengeName"
                                   StudentIdsLoader="LoadTargetStudentIds" />
        <Button OnClick="() => ChallengeTotalReportCreator.CreateReport(ChallengeId, ChallengeName, Match)"
                Loading="ChallengeTotalReportCreator.IsCreating"
                Icon="@IconType.Outline.FileExcel"
                Class="big-icon">
            Общий отчет
        </Button>
    </PageHeaderExtra>
</PageHeader>
<Space Direction="DirectionVHType.Vertical" Style="width: 100%">
    <SpaceItem>
        <Search Placeholder="Поиск по идентификатору, имени, email" EnterButton="true" @bind-Value="@Match" OnSearch="HandleChange" />
    </SpaceItem>
    <SpaceItem>
        <AuthorizeView Context="userContext">
            <Authorized>
                @if (exercises is null)
                {
                    <Skeleton Active />
                }
                else
                {
                    <Table DataSource="userResults?.Data"
                       Loading="loading"
                       Total="userResults?.Total ?? 0"
                       @bind-PageIndex="PageIndex"
                       @bind-PageSize="PageSize"
                       TItem="UserChallengeResultsResponse"
                       OnChange="HandleChange"
                       ScrollX="@((exercises.Count * 130).ToString())"
                       ScrollY="50vh" Style="color: red;">
                        <ChildContent>

                            <Column Title="Имя" TData="string" Fixed="left" Width="150">
                                <NavLink href="@($"results/{ChallengeId}/user/{context.User.Id}")">@context.User.FirstName</NavLink>
                            </Column>
                            @foreach (var exercise in exercises ?? Enumerable.Empty<ExerciseCompactResponse>())
                            {
                                <Column TData="string" Width="130" Title="@($"{exercise.Name} ({exercise.Score})")">
                                    @if (context.Scores.TryGetValue(exercise.Id.ToString(), out var score) && score.HasValue)
                                    {
                                        @score
                                    }
                                    else
                                    {
                                        <Text>—</Text>
                                    }
                                </Column>
                            }
                            <Column Title="Идентификатор" TData="string" Width="120" Fixed="right">@context.User.StudentId</Column>
                            <Column Title="Баллы" Field="context.TotalScore" Width="100" Fixed="right" />

                            @if (userContext.User.IsAdmin())
                            {
                                <ActionColumn Width="100" Fixed="right">
                                    <NavLink href="@($"users/{context.User.Id}")">
                                        <Button Icon="@IconType.Outline.User" />
                                    </NavLink>
                                </ActionColumn>
                            }

                        </ChildContent>
                        <FooterTemplate>
                            Найдено: <SkeletonRowComponent TData="string" Data="@(loading ? null as string : userResults?.Total.ToString())">
                                <Text Keyboard>@context</Text>
                            </SkeletonRowComponent>
                        </FooterTemplate>
                    </Table>
                }
            </Authorized>
        </AuthorizeView>
    </SpaceItem>
</Space>

@code {
    private string ChallengeName => challengeResponse?.Name ?? "Загрузка...";

    [Parameter]
    public Guid ChallengeId { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public string? Match { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public int PageIndex { get; set; } = 1;

    [SupplyParameterFromQuery]
    [Parameter]
    public int PageSize { get; set; } = 10;

    private bool loading = true;

    private ChallengeResponseWithAnalytics? challengeResponse;
    private ListResponseWithMatch<UserChallengeResultsResponse>? userResults;
    private List<ExerciseCompactResponse>? exercises;
    private Guid loadedChallengeId;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            challengeResponse = await ChallengesApi.GetOneChallengeAnalycisInfo(ChallengeId);
            exercises = await ExercisesApi.GetExercisesAsync(ChallengeId);
        }
        catch
        {
            GoToResults();
            await MessageService.Warn("Соревнование не найдено");
        }
    }


    private async Task HandleChange()
    {
        UpdateUrl();
        await LoadData();
    }
    private void UpdateUrl()
    {
        if (PageSize < 1)
        {
            PageSize = 10;
        }
        if (PageSize > 100)
        {
            PageSize = 100;
        }
        if ((PageIndex - 1) * PageSize > (userResults?.Total ?? 0))
        {
            Console.WriteLine(new { PageIndex, PageSize, userResults?.Total });
            PageIndex = 1;
        }
        if (PageIndex < 1)
        {
            PageIndex = 1;
        }
        var newUrl = CalcCurrentUrl();
        if (NavigationManager.Uri != newUrl)
        {
            NavigationManager.NavigateTo(newUrl);
        }
    }
    private SemaphoreSlim loadDataSemaphore = new SemaphoreSlim(1, 1);
    private async Task LoadData()
    {
        await loadDataSemaphore.WaitAsync();
        loading = true;
        try
        {
            var limit = PageSize < 1 ? 50 : PageSize;
            var pageIndexToLoad = PageIndex < 1 ? 1 : PageIndex;
            var offset = (pageIndexToLoad - 1) * limit;
            var localChallengeId = ChallengeId;
            if (loadedChallengeId == localChallengeId &&
                Match == userResults?.Match &&
                offset == userResults?.Offset &&
                limit == userResults?.Limit)
            {
                return;
            }
            userResults = await ChallengesApi.GetUserResultsForChallenge(localChallengeId, Match, offset, limit);
            loadedChallengeId = localChallengeId;
            UpdateUrl();
        }
        finally
        {
            loading = false;
            loadDataSemaphore.Release();
        }
    }

    private Task<List<string>> LoadTargetStudentIds()
    {
        return ChallengesApi.GetChallengeParticipants(ChallengeId, Match);
    }

    private void GoToResults()
    {
        NavigationManager.NavigateTo("results");
    }

    private string CalcCurrentUrl()
    {
        var queryParams = new Dictionary<string, object?>
        {
            {nameof(PageIndex), PageIndex <= 1 ? null : PageIndex},
            {nameof(PageSize), PageSize == 10 ? null : PageSize},
            {nameof(Match), Match},
        };
        return NavigationManager.GetUriWithQueryParameters(queryParams);
    }
}
