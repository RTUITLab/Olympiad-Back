@page "/results/{ChallengeId:guid}"
@attribute [Authorize(Roles = RoleNames.RESULTS_VIEWER)]


@using PublicAPI.Requests.Account
@using PublicAPI.Responses
@using PublicAPI.Responses.Challenges
@using Olympiad.ControlPanel.Pages.Challenges.Edit.Components
@using PublicAPI.Responses.Challenges.Analytics
@using PublicAPI.Responses.Exercises
@using System.Threading


@inject MessageService MessageService
@inject NavigationManager NavigationManager
@inject IChallengesApi ChallengesApi
@inject IExercisesApi ExercisesApi
@inject ChallengeTotalReportCreator ChallengeTotalReportCreator
<PageTitle>@ChallengeName</PageTitle>
<PageHeader Title="@ChallengeName">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem Href="results">
                Результаты
            </BreadcrumbItem>
            <BreadcrumbItem>
                @ChallengeName
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
    <PageHeaderExtra>
        <SolutionsReportsGenerator @ref="solutionsReportGeneratorRef"
                                   ChallengeId="ChallengeId"
                                   ChallengeName="@ChallengeName"
                                   StudentIdsLoader="LoadTargetStudentIds" />
        <Dropdown Trigger="DrowdownHelpers.OnlyClickTrigger" @ref="actionsRef">
            <Overlay>
                <Menu Class="buttons-menu big-icon" Selectable="false" Mode="MenuMode.Inline" OnMenuItemClicked=@(() => actionsRef!.Close())>
                    <MenuItem Title="Персональные отчёты" Icon="@IconType.Outline.FilePdf" OnClick="CreatePersonalReports" />
                    <MenuItem Title="Общий отчет" Icon="@IconType.Outline.FileExcel" OnClick="CreateTotalReport" />
                </Menu>
            </Overlay>
            <ChildContent>
                <Button Icon="@IconType.Outline.Download">Загрузки <Icon Type="@IconType.Outline.Down" /></Button>
            </ChildContent>
        </Dropdown>
    </PageHeaderExtra>
    <PageHeaderContent>
        <Descriptions Column="DescriptionsHelpers.AdaptiveColumns">
            <DescriptionsItem Title="Имеют доступ">
                <TextFieldSkeleton Text="@challengeResponse?.HasAccessCountPretty()" />
            </DescriptionsItem>
            <DescriptionsItem Title="Приступили к выполнению">
                <TextFieldSkeleton Text="@challengeResponse?.StartedExecutionCount.ToString()" />
            </DescriptionsItem>
        </Descriptions>
    </PageHeaderContent>
</PageHeader>
<Space Direction="DirectionVHType.Vertical" Style="width: 100%">
    <SpaceItem>
        <Search Placeholder="Поиск по идентификатору, имени, email" EnterButton="true" @bind-Value="@Match" OnSearch="HandleChange" />
    </SpaceItem>
    <SpaceItem>
        @if (exercises is null)
        {
            <Skeleton Active />
        }
        else
        {
            <Table DataSource="userResults?.Data"
               Loading="loading"
               Total="userResults?.Total ?? 0"
               @bind-PageIndex="PageIndex"
               @bind-PageSize="PageSize"
               TItem="UserChallengeResultsResponse"
               OnChange="HandleChange"
               ScrollX="@((exercises.Count * 130).ToString())"
               ScrollY="35vh">
                <TitleTemplate>
                    <SelectClaimsForm Claims="claims" ClaimsChanged="ClaimsChanged" />
                </TitleTemplate>
                <ChildContent>

                    <Column Title="Имя" TData="string" Fixed="left" Width="150">
                        <NavLink href="@($"results/{ChallengeId}/user/{context.User.Id}")">@context.User.FirstName</NavLink>
                    </Column>
                    @foreach (var exercise in exercises)
                    {
                        <Column TData="string" Width="130">
                            <TitleTemplate>
                                <Tooltip Title="exercise.InternalDescription">
                                    @exercise.Name @exercise.Score
                                </Tooltip>
                            </TitleTemplate>
                            <ChildContent>
                                @if (context.Scores.TryGetValue(exercise.Id.ToString(), out var score) && score.HasValue)
                                {
                                    @score
                                }
                                else
                                {
                                    <Text>—</Text>
                                }
                            </ChildContent>
                        </Column>
                    }
                    <Column Title="Идентификатор" TData="string" Width="120" Fixed="right">@context.User.StudentId</Column>
                    <Column Title="Баллы" Field="context.TotalScore" Width="100" Fixed="right" />

                    @if (IsAdmin)
                    {
                        <ActionColumn Width="100" Fixed="right">
                            <NavLink href="@($"users/{context.User.Id}")">
                                <Button Icon="@IconType.Outline.User" />
                            </NavLink>
                        </ActionColumn>
                    }

                </ChildContent>
                <FooterTemplate>
                    Найдено: <SkeletonRowComponent TData="string" Data="@(loading ? null as string : userResults?.Total.ToString())">
                        <Text Keyboard>@context</Text>
                    </SkeletonRowComponent>
                </FooterTemplate>
            </Table>
        }
    </SpaceItem>
</Space>

@code {
    private string ChallengeName => challengeResponse?.Name ?? "Загрузка...";

    [Parameter]
    public Guid ChallengeId { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public string? Match { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public int PageIndex { get; set; } = 1;

    [SupplyParameterFromQuery]
    [Parameter]
    public int PageSize { get; set; } = 10;

    private IReadOnlyList<ClaimRequest> claims = Enumerable.Empty<ClaimRequest>().ToList().AsReadOnly();
    [SupplyParameterFromQuery]
    [Parameter]
    public string? Claims
    {
        get => ClaimRequest.PackClaimsToUrl(claims);
        set
        {
            claims = (ClaimRequest.ParseClaimsFromUrl(value) ?? Enumerable.Empty<ClaimRequest>()).ToList().AsReadOnly();
        }
    }

    [CascadingParameter]
    public Task<AuthenticationState>? AuthStateTask { get; set; }
    private bool IsAdmin => AuthStateTask?.Status == TaskStatus.RanToCompletion && AuthStateTask.Result.User.IsAdmin();

    private Dropdown? actionsRef;
    private SolutionsReportsGenerator? solutionsReportGeneratorRef;

    private bool loading = true;

    private ChallengeResponseWithAnalytics? challengeResponse;
    private ListResponseWithMatch<UserChallengeResultsResponse>? userResults;
    private List<AdminExerciseCompactResponse>? exercises;
    private Guid loadedChallengeId;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            challengeResponse = await ChallengesApi.GetOneChallengeAnalycisInfo(ChallengeId);
            exercises = await ExercisesApi.GetAllExercisesAsync(ChallengeId);
        }
        catch
        {
            GoToResults();
            await MessageService.Warn("Соревнование не найдено");
        }
    }

    private async Task ClaimsChanged(IReadOnlyList<ClaimRequest> newClaims)
    {
        claims = newClaims;
        await HandleChange();
    }
    private async Task HandleChange()
    {
        UpdateUrl();
        await LoadData();
    }

    private void UpdateUrl()
    {
        if (PageSize < 1)
        {
            PageSize = 10;
        }
        if (PageSize > 100)
        {
            PageSize = 100;
        }
        if ((PageIndex - 1) * PageSize > (userResults?.Total ?? 0))
        {
            PageIndex = 1;
        }
        if (PageIndex < 1)
        {
            PageIndex = 1;
        }
        var newUrl = CalcCurrentUrl();
        if (NavigationManager.Uri != newUrl)
        {
            NavigationManager.NavigateTo(newUrl);
        }
    }
    private SemaphoreSlim loadDataSemaphore = new SemaphoreSlim(1, 1);
    private IReadOnlyList<ClaimRequest>? loadedClaims;
    private async Task LoadData()
    {
        await loadDataSemaphore.WaitAsync();
        loading = true;
        try
        {
            var limit = PageSize < 1 ? 50 : PageSize;
            var pageIndexToLoad = PageIndex < 1 ? 1 : PageIndex;
            var offset = (pageIndexToLoad - 1) * limit;
            var localChallengeId = ChallengeId;
            var claimsToLoad = claims;
            if (loadedChallengeId == localChallengeId &&
                Match == userResults?.Match &&
                offset == userResults?.Offset &&
                limit == userResults?.Limit &&
                claims.SequenceEqual(loadedClaims ?? Enumerable.Empty<ClaimRequest>()))
            {
                return;
            }
            userResults = await ChallengesApi.GetUserResultsForChallenge(localChallengeId, Match, offset, limit, claimsToLoad);
            loadedChallengeId = localChallengeId;
            loadedClaims = claimsToLoad;
            UpdateUrl();
        }
        finally
        {
            loading = false;
            loadDataSemaphore.Release();
        }
    }

    private async Task CreatePersonalReports()
    {
        if (solutionsReportGeneratorRef is null)
        {
            return;
        }
        await solutionsReportGeneratorRef.Open();
    }
    private async Task CreateTotalReport()
    {
        try
        {
            await ChallengeTotalReportCreator.CreateReport(ChallengeId, ChallengeName, Match, claims);
        }
        catch
        {
            await MessageService.Error("Произошла ошибка при создании персональных отчётов");
        }
    }

    private Task<List<string>> LoadTargetStudentIds()
    {
        return ChallengesApi.GetChallengeParticipants(ChallengeId, Match, claims);
    }

    private void GoToResults()
    {
        NavigationManager.NavigateTo("results");
    }

    private string CalcCurrentUrl()
    {
        var queryParams = new Dictionary<string, object?>
        {
            {nameof(PageIndex), PageIndex <= 1 ? null : PageIndex},
            {nameof(PageSize), PageSize == 10 ? null : PageSize},
            {nameof(Match), Match},
            {nameof(Claims), Claims},
        };
        return NavigationManager.GetUriWithQueryParameters(queryParams);
    }
}
