@using Ganss.XSS
@using Markdig
@using Microsoft.Extensions.Logging
@using Olympiad.Shared.Services
@inject IReportsApi ReportsApi
@inject IJSRuntime JS
@inject ILogger<SolutionsReportsGenerator> Logger
@inject MessageService MessageService

<Button Icon="@IconType.Outline.FilePdf"
        Class="big-icon"
        OnClick="Open"
        Loading="IsLoading">
    @ButtonText
</Button>

<Drawer Closable="true"
        Visible="isVisible"
        Placement="right"
        OnClose="Close"
        Title='("Создание отчёта")'
        BodyStyle="white-space: normal;"
        Width="750">
    <SolutionsReportOptions @bind-ReportOptions="options" Disabled="IsLoading" />
    <Divider />
    @if (!string.IsNullOrEmpty(StudentId))
    {
        <Button OnClick="DownloadOneReport" Type="@ButtonType.Primary">Скачать отчет</Button>
    }
    else if (studentIds?.Any() == true)
    {
        <Paragraph>Будет создано отчетов: <Text Keyboard>@studentIds.Count</Text></Paragraph>
        <Paragraph>Для сохранения множества отчётов необходимо предоставить доступ к редактированию папки на вашем компьютере. Отчеты сохранятся в неё. </Paragraph>
        <Button>Выбрать папку для отчётов</Button>
    }

    @if (isGenerating)
    {
        <Progress Percent="generatingProgress" />
    }
</Drawer>

@code {
    [Parameter]
    public string? ButtonText { get; set; }
    [Parameter]
    public Guid ChallengeId { get; set; }
    [Parameter]
    public Func<Task<List<string>>>? StudentIdsLoader { get; set; }
    [Parameter]
    public string? StudentId { get; set; }

    private List<string>? studentIds;
    private bool IsLoading => reportsJSModule is null || isGenerating;

    private UserSolutionsReportOptions options = UserSolutionsReportOptions.Default;

    private bool isVisible;
    private bool isGenerating;
    private double generatingProgress;
    static SolutionsReportsGenerator()
    {
        htmlSanitizer = new HtmlSanitizer();
        htmlSanitizer.AllowedAttributes.Add("class");
        htmlSanitizer.AllowedSchemes.Add("data");
    }


    private static readonly HtmlSanitizer htmlSanitizer;
    private static readonly MarkdownPipeline markdownPipeline
        = new MarkdownPipelineBuilder().UsePipeTables().UsePreciseSourceLocation().UseAdvancedExtensions().Build();
    private IJSObjectReference? reportsJSModule;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            reportsJSModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/reportsCreating.js");
            StateHasChanged();
        }
    }

    private async Task DownloadOneReport()
    {
        if (string.IsNullOrEmpty(StudentId) || reportsJSModule is null || isGenerating)
        {
            await MessageService.Warning("Невозможно начать генерацию");
            return;
        }
        isGenerating = true;
        try
        {
            var response = await ReportsApi.GetReportForChallenge(ChallengeId, StudentId, options);
            var html = Markdown.ToHtml(response, markdownPipeline);
            html = htmlSanitizer.Sanitize(html);
            await reportsJSModule.InvokeVoidAsync("createSingleReport", html, $"{StudentId}.pdf");
        }
        finally
        {
            isGenerating = false;
        }
    }

    private async Task Open()
    {
        if (StudentIdsLoader  is not null)
        {
            isGenerating = true;
            try
            {
                studentIds = await StudentIdsLoader ();
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Can't student ids");
                await MessageService.Warning("Не удалось получить список пользователей для создания отчета");
                return;
            }
            finally
            {
                isGenerating = false;
            }
        }
        isVisible = true;
    }


    private async Task Close()
    {
        if (IsLoading)
        {
            await MessageService.Warning("Идет создание отчёта");
            return;
        }
        isVisible = false;
    }
}
