@page "/results/{ChallengeId:guid}/user/{UserId:guid}/solution/{SolutionId:guid}"
@attribute [Authorize(Roles = RoleNames.RESULTS_VIEWER)]

@using Microsoft.Extensions.Logging
@using Olympiad.Shared.Models
@using PublicAPI.Responses.Challenges
@using PublicAPI.Responses.Exercises
@using PublicAPI.Responses.Solutions.Analytics
@using PublicAPI.Responses.Users
@using Olympiad.ControlPanel.Pages.Results.UserSolutionResults.Components

@inject ILogger<UserSolutionResultsPage> Logger
@inject NavigationManager NavigationManager
@inject ISolutionsApi SolutionsApi
@inject MessageService MessageService
@inject NotificationService NotificationService

<PageTitle>@(exercise?.Name ?? "Загрузка...") - @(user?.FirstName ?? "Загрузка...")</PageTitle>
<AuthorizeView Context="userContext">
    <Authorized>
        <PageHeader Title="@(exercise?.Name ?? "Загрузка...")">
            <PageHeaderBreadcrumb>
                <Breadcrumb>
                    <BreadcrumbItem Href="results">
                        Результаты
                    </BreadcrumbItem>
                    <BreadcrumbItem Href="@($"results/{ChallengeId}")">
                        @(challenge?.Name ?? $"Загрузка...")
                    </BreadcrumbItem>
                    <BreadcrumbItem Href="@($"results/{ChallengeId}/user/{UserId}")">
                        @(user?.FirstName ?? $"Загрузка...")
                    </BreadcrumbItem>
                    <BreadcrumbItem>
                        @(exercise?.Name ?? $"Загрузка...")
                    </BreadcrumbItem>
                </Breadcrumb>
            </PageHeaderBreadcrumb>
            <PageHeaderExtra>
                <Dropdown Trigger="DrowdownHelpers.OnlyClickTrigger" @ref="actionsRef">
                    <Overlay>
                        <Menu Class="buttons-menu big-icon" Selectable="false" Mode="MenuMode.Inline" OnMenuItemClicked=@(() => actionsRef!.Close())>
                            <Popconfirm Title="Вы действительно хотите перепроверить этого задания? Текущие проверки будут удалены, перепроверка может занять время"
                                        OkText="Перепроверить"
                                        CancelText="Отмена"
                                        OnConfirm="RecheckSolution"
                                        Style="width: 100%">
                                <MenuItem Title="Перепроверить"
                                          Key="recheck"
                                          Style="@($"color: {BaseColors.Warning}; width: 100%;")"
                                          Icon="@IconType.Outline.Sync"
                                          Disabled="loading" />
                            </Popconfirm>
                        </Menu>
                    </Overlay>
                    <ChildContent>
                        <Button Loading="loading">Действия <Icon Type="@IconType.Outline.Down" /></Button>
                    </ChildContent>
                </Dropdown>
            </PageHeaderExtra>
            <PageHeaderContent>
                <SolutionPageDescriptions solution="solution" />
            </PageHeaderContent>
        </PageHeader>
        @if (exercise?.Type == ExerciseType.Code)
        {
            <SolutionResultsTabs SolutionId="SolutionId"
                             BuildLogsAccent="@(solution?.Status <= SolutionStatus.CompileError)" />
        }
        else if (exercise?.Type == ExerciseType.Docs)
        {
            <DocsSolutionResultsTable SolutionId="SolutionId" />
        }
    </Authorized>
</AuthorizeView>



@code {
    [Parameter]
    public Guid ChallengeId { get; set; }
    [Parameter]
    public Guid UserId { get; set; }
    [Parameter]
    public Guid SolutionId { get; set; }

    private Dropdown? actionsRef;
    private bool loading;

    private SolutionAnalyticsResponse? solution;
    private ExerciseInfo? exercise => solution?.Exercise;
    private ChallengeResponse? challenge => exercise?.Challenge;
    private UserInfoResponse? user => solution?.User;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        loading = true;
        try
        {
            solution = await SolutionsApi.GetInfoAboutSolution(SolutionId);
            if (solution.User.Id != UserId)
            {
                throw new ArgumentOutOfRangeException(nameof(UserId), $"Incorrect {nameof(UserId)} for {nameof(SolutionId)}");
            }
            if (solution.Exercise.ChallengeId != ChallengeId)
            {
                throw new ArgumentOutOfRangeException(nameof(ChallengeId), $"Incorrect {nameof(ChallengeId)} for {nameof(SolutionId)}");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Can't load solution info");
            NavigationManager.NavigateTo(Routes.Results.UserCHallengeResults(ChallengeId, UserId));
            MessageService.ShowWarning("Невозможно загрузить данные о решении");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task RecheckSolution()
    {
        loading = true;
        try
        {
            await SolutionsApi.RecheckSolution(SolutionId);
            NotificationService.ShowError("Перепроверка задания началась, перезагрузите страницу");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Can't recheck solution");
            NotificationService.ShowError("Не удалось начать перепроверку");
        }
        finally
        {
            loading = false;
        }
    }
}
