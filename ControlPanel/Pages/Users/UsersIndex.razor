@page "/users"
@attribute [Authorize(Roles = RoleNames.ADMIN)]

@using AntDesign.TableModels
@using Olympiad.Shared
@using PublicAPI.Responses
@using PublicAPI.Responses.Users
@using System.Text
@using System.Threading
@using static Olympiad.ControlPanel.Components.UsersTable

@inject MessageService _message
@inject IControlPanelApiService ControlPanelApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Управление пользователями</PageTitle>
<PageHeader Title="Управление пользователями">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem>
                Пользователи
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
    <PageHeaderExtra>
        <NavLink href="users/generate">
            <Button Type="@ButtonType.Primary">Генерация</Button>
        </NavLink>
    </PageHeaderExtra>
</PageHeader>

<UsersTable Selection="selectionModel" SelectionChanged="HandleChange" />

@code {

    [SupplyParameterFromQuery]
    [Parameter]
    public string? Match
    {
        get => selectionModel.Match; set
        {
            selectionModel.Match = value;
        }
    }

    [SupplyParameterFromQuery]
    [Parameter]
    public int PageIndex
    {
        get => selectionModel.PageIndex; set
        {
            selectionModel.PageIndex = value;
        }
    }

    [SupplyParameterFromQuery]
    [Parameter]
    public int PageSize
    {
        get => selectionModel.PageSize; set
        {
            selectionModel.PageSize = value;
        }
    }

    private UsersSelectionModel selectionModel = new UsersSelectionModel();

    private IEnumerable<UserInfoResponse>? usersSource => loadedData?.Data;
    private ListResponseWithMatch<UserInfoResponse>? loadedData;
    private bool loading;

    private void HandleChange(UsersSelectionModel newSelectionModel)
    {
        var newUrl = CalcCurrentUrl();
        if (NavigationManager.Uri != newUrl)
        {
            NavigationManager.NavigateTo(newUrl);
        }
        selectionModel = newSelectionModel;
    }

    private string CalcCurrentUrl()
    {
        var queryParams = new Dictionary<string, object?>
        {
            {nameof(PageIndex), PageIndex <= 1 ? null : PageIndex},
            {nameof(PageSize), PageSize == 50 ? null : PageSize},
            {nameof(Match), Match},
        };
        return NavigationManager.GetUriWithQueryParameters(queryParams);
    }
    }
