@page "/users/{UserId:guid}"
@attribute [Authorize(Roles = RoleNames.ADMIN)]

@using Olympiad.ControlPanel.Pages.Users.Edit.Components
@using PublicAPI.Responses.Users

@inject MessageService _message
@inject NavigationManager NavigationManager
@inject IControlPanelApiService ControlPanelApiService
@inject IJSRuntime JS

<PageHeader Title="@(userInfo?.FirstName ?? "Загрузка")">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem Href="users">
                Пользователи
            </BreadcrumbItem>
            <BreadcrumbItem>
                @(userInfo?.FirstName ?? "Загрузка")
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
    <PageHeaderExtra>
        <LoginAsUserButton UserId="UserId" />
        <GenerateNewPasswordButton UserId="UserId" PasswordChanged="@(() => {editUserClaims?.RefreshData(); })" />
        <Button Type="@ButtonType.Dashed" Danger OnClick=ShowDeleteModal>Удалить аккаунт</Button>
    </PageHeaderExtra>
</PageHeader>
<DeleteUserConfirmationModal @ref=deleteModal />

@if (userInfo != null)
{
    <Row>
        <AntDesign.Col Xs=24 Md=16>
            <EditUserBaseInfo @bind-User=userInfo />
        </AntDesign.Col>
    </Row>
    <Row>
        <AntDesign.Col Xs=24 Md=16>
            <EditUserClaims User="userInfo" @ref="editUserClaims" />
        </AntDesign.Col>
    </Row>
}


@code {
    [Parameter]
    public Guid UserId { get; set; }

    private DeleteUserConfirmationModal? deleteModal;
    private EditUserClaims? editUserClaims;
    private UserInfoResponse? userInfo;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var response = await ControlPanelApiService.GetUser(UserId);
        if (response.IsSuccessStatusCode)
        {
            userInfo = response.Content;
        }
        else
        {
            NavigationManager.NavigateTo("users");
        }
    }

    private void ShowDeleteModal()
    {
        deleteModal?.Show(userInfo!);
    }
    }
