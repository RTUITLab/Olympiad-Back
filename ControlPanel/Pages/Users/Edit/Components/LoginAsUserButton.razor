@inject IControlPanelApiService ControlPanelApiService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject MessageService MessageService
<DropdownButton OnClick="LoginAsUser" Loading="isLoading">
    <Overlay>
        <Menu>
            <MenuItem OnClick="CopyUrlToClipboard">Скопировать ссылку</MenuItem>
        </Menu>
    </Overlay>
    <ChildContent>
        Войти под пользователем
    </ChildContent>
</DropdownButton>

@code {
    [Parameter]
    public Guid UserId { get; set; }


    private bool isLoading;

    private async Task LoginAsUser()
    {
        await DoActionWithToken(token => JS.OpenLinkInNewTab($"/#{token}"));
    }
    private async Task CopyUrlToClipboard()
    {
        await DoActionWithToken(async token =>
        {
            var baseAddress = new Uri(NavigationManager.BaseUri).GetLeftPart(UriPartial.Authority);
            var success = await JS.CopyTextToClipboard($"{baseAddress}/#{token}");
            await MessageService.Open(new MessageConfig
                {
                    Type = success ? MessageType.Success : MessageType.Warning,
                    Content = success ? "Ссылка для входа скопирована" : "Невозможно скопировать ссылку"
                });
        });
    }

    private async Task DoActionWithToken(Func<string, ValueTask> action)
    {
        isLoading = true;
        string token;
        try
        {
            var tokenInfo = await ControlPanelApiService.GetTokenForUser(UserId);
            token = tokenInfo.Token;
        }
        finally
        {
            isLoading = false;
        }
        await action(token);
    }
}
