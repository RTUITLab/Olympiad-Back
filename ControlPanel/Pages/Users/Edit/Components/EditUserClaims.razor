@using Olympiad.Shared
@using PublicAPI.Requests
@using PublicAPI.Requests.Account
@using PublicAPI.Responses.Account
@using PublicAPI.Responses.Users

@inject IControlPanelApiService ControlPanelApiService
@inject IJSRuntime JS
@inject MessageService _message

<Card Loading="claims is null">
    <TitleTemplate>
        Свойства пользователя
        <Tooltip Title="@("Могут быть использованы для массового добавления к соревнованиям")">
            <Icon Type="@IconType.Outline.InfoCircle" />
        </Tooltip>
    </TitleTemplate>

    <ChildContent>
        <Table DataSource="claims"
               Loading="loading"
               HidePagination="@(claims?.Count <= 10)">
            <ChildContent>
                <Column @bind-Field="@context.Type" Title="Тип">
                    <Text>
                        @if (context.Type == DefaultClaims.NeedResetPassword.Type && context.Value == DefaultClaims.NeedResetPassword.Value)
                        {
                            <Tooltip Title="@("Пользователь еще не сменил сгенерированный пароль")">
                                <Icon Type="@IconType.Outline.InfoCircle" />
                            </Tooltip>
                        }
                        @context.Type
                    </Text>
                </Column>
                <Column @bind-Field="context.Value" Title="Значение" />
                <ActionColumn>
                    <Button Danger OnClick="()=>RemoveClaim(context)" Icon="@IconType.Outline.Delete" />
                </ActionColumn>
            </ChildContent>
            <FooterTemplate>
                <Form Model="newClaim"
                      Layout="inline"
                      OnFinish="@AddClaim">
                    <FormItem>
                        <AutoComplete Width=@("30em") @bind-Value="@context.Type" @ref="typeInput" Options="AvailableClaimTypes" Placeholder="Тип" />
                    </FormItem>
                    <FormItem>
                        <AutoComplete Width=@("30em") @bind-Value="@context.Value" Options="AvailableClaimValues" Placeholder="Значение" />
                    </FormItem>
                    <FormItem>
                        <Button Type="@ButtonType.Default" HtmlType="submit" Icon="@IconType.Outline.Plus" />
                    </FormItem>
                </Form>

            </FooterTemplate>
        </Table>
    </ChildContent>
</Card>

@code {
    private Guid? lastLoadedUserId;
    [Parameter, EditorRequired]
    public Guid UserId { get; set; }

    private bool loading = true;
    private List<ClaimResponseObject>? claims;
    private Dictionary<string, List<string>>? alreadyExistingClaims;
    private IEnumerable<ClaimResponseObject> SafeClaims => claims ?? Enumerable.Empty<ClaimResponseObject>();
    private IEnumerable<string>? AvailableClaimTypes => alreadyExistingClaims?
        .Select(kvp => (type: kvp.Key, valueExists: kvp.Value.Except(SafeClaims.Where(c => c.Type == kvp.Key).Select(c => c.Value)).Any()))
        .Where(c => c.valueExists)
        .Select(c => c.type);

    private IEnumerable<string>? AvailableClaimValues =>
        alreadyExistingClaims?.TryGetValue(newClaim.Type ?? "", out var values) == true ?
            values.Except(SafeClaims.Where(c => c.Type == newClaim.Type).Select(c => c.Value)).ToList()
            : Enumerable.Empty<string>();


    private ClaimRequest newClaim = new ClaimRequest();

    private AutoComplete<string>? typeInput;

    public async Task RefreshData(bool force = false)
    {
        if (lastLoadedUserId == UserId && !force)
        {
            return;
        }
        loading = true;
        try
        {
            var userId = UserId;
            claims = await ControlPanelApiService.GetClaims(userId);
            lastLoadedUserId = userId;
        }
        finally
        {
            loading = false;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        alreadyExistingClaims = await ControlPanelApiService.GetAllClaims();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshData();
    }

    private async Task AddClaim()
    {
        loading = true;
        try
        {
            claims = await ControlPanelApiService.AddClaim(UserId, newClaim);
            newClaim = new ClaimRequest();
            needFocus = true; // Send signal to OnAfterRenderAsync for change focus
        }
        finally
        {
            loading = false;
        }
    }
    private bool needFocus;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (needFocus)
        {
            needFocus = false;
            if (typeInput != null)
            {
                await typeInput.InputFocus(new FocusEventArgs());
            }
        }
    }

    private async Task RemoveClaim(ClaimResponseObject claim)
    {
        loading = true;
        try
        {
            claims = await ControlPanelApiService.RemoveClaim(UserId, claim.Type, claim.Value);
            newClaim = new ClaimRequest();
        }
        finally
        {
            loading = false;
        }
    }
}
