@using PublicAPI.Responses.Account
@inject IControlPanelApiService ApiService

<Tooltip Title="@("На данный момент показываются только входы в систему")">
    <Title Level="4">События пользователя</Title>
</Tooltip>
<Spin Spinning="loading">
    @if (history?.Count == 0)
    {
        <Alert Type="info">Данный пользователь еще не входил в систему</Alert>
    }
    @if (loading)
    {
        <Alert Type="info">Загрузка</Alert>
    }
    @if (error)
    {
        <Alert Type="warning">Невозможно получить данные<Button Style="margin-left: 2em" OnClick="@(() => LogsFromCascading?.Show())">Открыть логи</Button></Alert>
    }
    <Collapse>
        @foreach (var record in history ?? Enumerable.Empty<LoginEventResponse>())
        {
            <Panel>
                <HeaderTemplate>
                    Вход
                    <PrettyDateTimeOffset DateTimeOffset="record.Date" />
                </HeaderTemplate>
                <ChildContent>
                    <Descriptions Bordered Size="@DescriptionsSize.Small" Column="1">
                        <DescriptionsItem Title="IP">@record.IP</DescriptionsItem>
                        <DescriptionsItem Title="User-Agent">@record.UserAgent</DescriptionsItem>
                    </Descriptions>
                </ChildContent>
            </Panel>
        }
    </Collapse>
</Spin>

@code {
    [Parameter]
    public Guid UserId { get; set; }

    [CascadingParameter]
    public ILogsService? LogsFromCascading { get; set; }

    private List<LoginEventResponse>? history;
    private bool loading = true;
    private bool error;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        loading = true;
        error = false;
        try
        {
            history = await ApiService.GetLoginEvents(UserId);
        }
        catch (Exception ex)
        {
            LogsFromCascading?.LogInfoObject("Не удалось скачать историю входов", new { ExceptionType = ex.GetType().FullName, Message = ex.Message });
            error = true;
        }
        finally
        {
            loading = false;
        }
    }
}
