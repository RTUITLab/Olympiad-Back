@inject IControlPanelApiService ControlPanelApiService

<Button Type="@ButtonType.Dashed" OnClick="@ShowModal">Новый пароль</Button>

<Modal Visible=showModal
       Closable
       OnCancel="@(() => showModal = false)"
       Title="Генерирование нового пароля"
       OkText="@("Сменить пароль")"
       CancelText="@("Отмена")"
       ConfirmLoading="@loading"
       OnOk=GeneratePassword>
    <Spin Spinning="loading">
        <Space Direction="DirectionVHType.Vertical">
            <SpaceItem>
                <Text>При смене пароля пользователь не сможет войти под его текущим паролем.</Text>
            </SpaceItem>
            <SpaceItem>
                <Popover Title="Позднее будет добавлена возможность выхода из сессии">
                    <Text Strong>Текущая сессия пользователя сохранится</Text>
                </Popover>
            </SpaceItem>
            <SpaceItem>
                @if (!string.IsNullOrEmpty(newPassword))
                {
                    <Title Level=2>Новый пароль: </Title>
                    <AntDesign.Text Keyboard
                                Style="font-size:40px; letter-spacing: 0.1em;"
                                Copyable>
                        @newPassword
                    </AntDesign.Text>
                }
            </SpaceItem>
        </Space>
    </Spin>

</Modal>

@code {

    [Parameter]
    public Guid UserId { get; set; }
    [Parameter]
    public EventCallback PasswordChanged { get; set; }

    private bool showModal;
    private bool loading;

    private string? newPassword;

    private void ShowModal()
    {
        newPassword = null;
        showModal = true;
    }

    private async Task GeneratePassword()
    {
        loading = true;
        try
        {
            var newPasswordData = await ControlPanelApiService.GenerateNewPasswordForUser(UserId);
            newPassword = newPasswordData.NewPassword;
            if (PasswordChanged.HasDelegate)
            {
                await PasswordChanged.InvokeAsync();
            }
        }
        finally
        {
            loading = false;
        }
    }



}
