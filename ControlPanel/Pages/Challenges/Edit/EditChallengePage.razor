@page "/challenges/{ChallengeId:guid}"
@attribute [Authorize(Roles = RoleNames.ADMIN)]

@using PublicAPI.Responses.Challenges
@using Olympiad.ControlPanel.Pages.Challenges.Edit.Components

@inject MessageService MessageService
@inject NavigationManager NavigationManager
@inject IChallengesApi ChallengesApi
@inject IJSRuntime JS

<PageHeader Title="@(challengeResponse?.Name ?? "Загрузка")">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem Href="challenges">
                Соревнования
            </BreadcrumbItem>
            <BreadcrumbItem>
                @(challengeResponse?.Name ?? "Загрузка")
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
    <PageHeaderExtra>
        @*<LoginAsUserButton UserId="UserId" />
            <GenerateNewPasswordButton UserId="UserId" PasswordChanged="@(() => editUserClaims.RefreshData())"/>*@
        @if (challengeResponse != null)
        {
            <DeleteChallengeButton ChallengeId="ChallengeId" ChallengeDeleted="GoToChallenges"/>
        }
    </PageHeaderExtra>
</PageHeader>


@ChallengeId
@code {
    [Parameter]
    public Guid ChallengeId { get; set; }

    private ChallengeResponse? challengeResponse;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            challengeResponse = await ChallengesApi.GetChallengeAsync(ChallengeId);
        }
        catch
        {
            GoToChallenges();
            await MessageService.Warn("Соревнование не найдено");
        }
    }

    private void GoToChallenges()
    {
        NavigationManager.NavigateTo("challenges");
    }
}
