@page "/challenges/{ChallengeId:guid}"
@attribute [Authorize(Roles = RoleNames.ADMIN)]

@using PublicAPI.Responses.Challenges
@using Olympiad.ControlPanel.Pages.Challenges.Edit.Components
@using Olympiad.Shared.Models

@inject MessageService MessageService
@inject NavigationManager NavigationManager
@inject IChallengesApi ChallengesApi
@inject IJSRuntime JS


<PageTitle>@ChallengeName</PageTitle>
<PageHeader Title="@ChallengeName">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem Href="challenges">
                Соревнования
            </BreadcrumbItem>
            <BreadcrumbItem>
                @ChallengeName
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
    <PageHeaderExtra>
        @if (challengeResponse != null)
        {
            @if (challengeResponse.ChallengeAccessType == ChallengeAccessType.Private)
            {
                <Button Icon="@IconType.Outline.UserSwitch" OnClick="OpenInvitationsEditComponent">Управление доступом</Button>
                <EditChallengeInvitations ChallengeName="@ChallengeName"
                                  ChallengeId="ChallengeId"
                                  @ref="editChallengeInvitationsRef" />
            }
            <NavLink href="@($"challenges/{ChallengeId}/exercises")">
                <Button Icon="@IconType.Outline.Reconciliation">Задания</Button>
            </NavLink>
            <DeleteChallengeButton ChallengeId="ChallengeId" ChallengeDeleted="GoToChallenges" />
        }
    </PageHeaderExtra>
</PageHeader>

@if (challengeResponse != null)
{
    <EditChallengeBaseInfo @bind-Challenge="challengeResponse" />
}

@code {
    [Parameter]
    public Guid ChallengeId { get; set; }


    private string ChallengeName => challengeResponse?.Name ?? "Загрузка...";

    private ChallengeResponse? challengeResponse;

    private EditChallengeInvitations? editChallengeInvitationsRef;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            challengeResponse = await ChallengesApi.GetChallengeAsync(ChallengeId);
        }
        catch
        {
            GoToChallenges();
            await MessageService.Warn("Соревнование не найдено");
        }
    }

    private async Task OpenInvitationsEditComponent()
    {
        if (editChallengeInvitationsRef is not null)
        {
            await editChallengeInvitationsRef.Show();
        }
    }

    private void GoToChallenges()
    {
        NavigationManager.NavigateTo("challenges");
    }
}
