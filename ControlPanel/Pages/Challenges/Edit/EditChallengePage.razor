@page "/challenges/{ChallengeId:guid}"
@attribute [Authorize(Roles = RoleNames.ADMIN)]

@using PublicAPI.Responses.Challenges
@using Olympiad.ControlPanel.Pages.Challenges.Edit.Components

@inject MessageService MessageService
@inject NavigationManager NavigationManager
@inject IChallengesApi ChallengesApi
@inject IJSRuntime JS
<PageTitle>@PageTitle</PageTitle>
<PageHeader Title="@PageTitle">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem Href="challenges">
                Соревнования
            </BreadcrumbItem>
            <BreadcrumbItem>
                @PageTitle
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
    <PageHeaderExtra>
        @if (challengeResponse != null)
        {
            <NavLink  href="@($"challenges/{ChallengeId}/exercises")"><Button Icon="@IconType.Outline.Reconciliation">Задания</Button></NavLink>
            <DeleteChallengeButton ChallengeId="ChallengeId" ChallengeDeleted="GoToChallenges" />
        }
    </PageHeaderExtra>
</PageHeader>

@if (challengeResponse != null)
{
    <EditChallengeBaseInfo @bind-Challenge="challengeResponse" />
}

@code {
    [Parameter]
    public Guid ChallengeId { get; set; }


    private string PageTitle => challengeResponse?.Name ?? "Загрузка...";

    private ChallengeResponse? challengeResponse;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            challengeResponse = await ChallengesApi.GetChallengeAsync(ChallengeId);
        }
        catch
        {
            GoToChallenges();
            await MessageService.Warn("Соревнование не найдено");
        }
    }

    private void GoToChallenges()
    {
        NavigationManager.NavigateTo("challenges");
    }
}
