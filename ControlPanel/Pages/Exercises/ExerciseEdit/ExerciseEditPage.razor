@page "/challenges/{ChallengeId:guid}/exercises/{ExerciseId:guid}"
@attribute [Authorize(Roles = RoleNames.ADMIN)]

@using Olympiad.ControlPanel.Components.MarkdownEdit
@using PublicAPI.Responses.Challenges
@using Olympiad.Shared.Models
@using PublicAPI.Responses.Exercises

@inject IChallengesApi ChallengesApi
@inject IExercisesApi ExercisesApi
@inject MessageService MessageService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject AttachmentLinkGenerator AttachmentLinkGenerator
@inject HttpClient HttpClient

<PageTitle>@ExerciseName()</PageTitle>
<PageHeader TitleTemplate="ExerciseName(SkeletonElementSize.Default)">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem Href="challenges">
                Соревнования
            </BreadcrumbItem>
            <BreadcrumbItem Href="@($"challenges/{ChallengeId}")">
                <TextFieldSkeleton Text="@challengeResponse?.Name" />
            </BreadcrumbItem>
            <BreadcrumbItem Href="@($"challenges/{ChallengeId}/exercises")">
                Задания
            </BreadcrumbItem>
            <BreadcrumbItem Href="@($"challenges/{ChallengeId}/exercises")">
                @ExerciseName()
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
</PageHeader>

@if (exerciseResponse is not null)
{
    <MarkdownTextArea @bind-Value="exerciseResponse.ExerciseTask">
        <TitleTemplate>
            <Text>@exerciseResponse.Name</Text>
            <Text Type="@TextElementType.Secondary">Текст задания (@exerciseResponse.Challenge.Name)</Text>
        </TitleTemplate>
    </MarkdownTextArea>
}

<Button OnClick="GetLink">Get link</Button>

<Button Icon="@IconType.Outline.FileExcel" OnClick="@(() => JS.InvokeVoidAsync("clickElement", inputFileRef?.Element))">Выбрать CSV файл</Button>
<InputFile @ref="inputFileRef" style="display: none" OnChange="HandleSelection" />

<ul>

    @foreach (var file in files ?? Enumerable.Empty<string>())
    {
        <li>
            <a href="@AttachmentLinkGenerator.GetExerciseLink(ExerciseId, file)">@file</a>
        </li>
    }
</ul>

@code {
    [Parameter]
    public Guid ChallengeId { get; set; }
    [Parameter]
    public Guid ExerciseId { get; set; }

    private InputFile? inputFileRef;

    private RenderFragment ExerciseName(string size = SkeletonElementSize.Small)
    {
        // Return template in full body method for VS code formatter
        return
    @<Template>
        <TextFieldSkeleton Text="@exerciseResponse?.Name" Size="@size" />
    </Template>
    ;
    }
    private List<string> files;
    private ChallengeResponse? challengeResponse;
    private ExerciseInfo? exerciseResponse;

    private async Task GetLink()
    {
        await JS.InvokeVoidAsync("console.log", files = await ExercisesApi.GetExerciseAttachmentLinksAsync(ExerciseId));
    }

    private async Task HandleSelection(InputFileChangeEventArgs files)
    {
        await JS.InvokeVoidAsync("console.log", files);
        var url = await ExercisesApi.GetUploadAttachmentUrl(ExerciseId, files.File.ContentType, files.File.Size, files.File.Name);
        var message = new HttpRequestMessage(HttpMethod.Put, url.Url);
        message.Headers.Add("x-amz-acl", "public-read");
        message.Content = new StreamContent(files.File.OpenReadStream(files.File.Size));
        message.Content.Headers.Add("Content-Type", files.File.ContentType);
        await HttpClient.SendAsync(message);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            challengeResponse = await ChallengesApi.GetChallengeAsync(ChallengeId);
        }
        catch
        {
            GoToExercisesPage();
            await MessageService.Warn("Соревнование не найдено");
        }
        try
        {
            await Task.Delay(1000);
            exerciseResponse = await ExercisesApi.GetExerciseAsync(ExerciseId);
            if (exerciseResponse.ChallengeId != ChallengeId)
            {
                GoToExercisesPage();
                await MessageService.Warn("Неверно составленный адрес страницы");
            }
        }
        catch
        {
            GoToExercisesPage();
            await MessageService.Warn("Не удалось получить список заданий");
        }
    }

    private void GoToExercisesPage()
    {
        NavigationManager.NavigateTo($"challenges/{ChallengeId}/exercises");
    }
}
