@page "/challenges/{ChallengeId:guid}/exercises/{ExerciseId:guid}"
@attribute [Authorize(Roles = RoleNames.ADMIN)]

@using Olympiad.ControlPanel.Components.MarkdownEdit
@using PublicAPI.Responses
@using PublicAPI.Responses.Challenges
@using Olympiad.Shared.Models
@using PublicAPI.Responses.Exercises

@inject IChallengesApi ChallengesApi
@inject IExercisesApi ExercisesApi
@inject MessageService MessageService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject AttachmentLinkGenerator AttachmentLinkGenerator
@inject HttpClient HttpClient

<PageTitle>@ExerciseName()</PageTitle>
<PageHeader TitleTemplate="ExerciseName(SkeletonElementSize.Default)">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem Href="challenges">
                Соревнования
            </BreadcrumbItem>
            <BreadcrumbItem Href="@($"challenges/{ChallengeId}")">
                <TextFieldSkeleton Text="@challengeResponse?.Name" />
            </BreadcrumbItem>
            <BreadcrumbItem Href="@($"challenges/{ChallengeId}/exercises")">
                Задания
            </BreadcrumbItem>
            <BreadcrumbItem Href="@($"challenges/{ChallengeId}/exercises")">
                @ExerciseName()
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
</PageHeader>

@if (exerciseResponse is not null)
{
    <CascadingValue Value="attachmentsProvider as IAttachmentsProvider">
        <MarkdownTextArea @bind-Value="exerciseResponse.ExerciseTask">
            <TitleTemplate>
                <Text>@exerciseResponse.Name</Text>
                <Text Type="@TextElementType.Secondary">Текст задания (@exerciseResponse.Challenge.Name)</Text>
            </TitleTemplate>
        </MarkdownTextArea>
    </CascadingValue>
}


@code {
    [Parameter]
    public Guid ChallengeId { get; set; }
    [Parameter]
    public Guid ExerciseId { get; set; }

    private InputFile? inputFileRef;

    private RenderFragment ExerciseName(string size = SkeletonElementSize.Small)
    {
        // Return template in full body method for VS code formatter
        return
    @<Template>
        <TextFieldSkeleton Text="@exerciseResponse?.Name" Size="@size" />
    </Template>
    ;
    }
    private ExerciseAttachmentsProvider? attachmentsProvider;
    private ChallengeResponse? challengeResponse;
    private ExerciseInfo? exerciseResponse;
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (attachmentsProvider?.ExerciseId != ExerciseId)
        {
            attachmentsProvider = new ExerciseAttachmentsProvider(ExerciseId, ExercisesApi, AttachmentLinkGenerator);
        }
        try
        {
            challengeResponse = await ChallengesApi.GetChallengeAsync(ChallengeId);
        }
        catch
        {
            GoToExercisesPage();
            await MessageService.Warn("Соревнование не найдено");
        }
        try
        {
            await Task.Delay(1000);
            exerciseResponse = await ExercisesApi.GetExerciseAsync(ExerciseId);
            if (exerciseResponse.ChallengeId != ChallengeId)
            {
                GoToExercisesPage();
                await MessageService.Warn("Неверно составленный адрес страницы");
            }
        }
        catch
        {
            GoToExercisesPage();
            await MessageService.Warn("Не удалось получить список заданий");
        }
    }

    private void GoToExercisesPage()
    {
        NavigationManager.NavigateTo($"challenges/{ChallengeId}/exercises");
    }

    private class ExerciseAttachmentsProvider : IAttachmentsProvider
    {
        private readonly IExercisesApi exercisesApi;
        private readonly AttachmentLinkGenerator attachmentLinkGenerator;

        public Guid ExerciseId { get; }

        public ExerciseAttachmentsProvider(Guid exerciseId, IExercisesApi exercisesApi, AttachmentLinkGenerator attachmentLinkGenerator)
        {
            ExerciseId = exerciseId;
            this.exercisesApi = exercisesApi;
            this.attachmentLinkGenerator = attachmentLinkGenerator;
        }

        public Task<List<AttachmentResponse>> GetAttachments()
        {
            return exercisesApi.GetExerciseAttachmentsAsync(ExerciseId);
        }

        public string GetAttachmentUrl(string fileName)
        {
            return attachmentLinkGenerator.GetExerciseLink(ExerciseId, fileName);
        }

        public async Task<string> GetUploadUrl(string fileName, long fileSize, string mimeType)
        {
            return (await exercisesApi.GetUploadAttachmentUrl(ExerciseId, mimeType, fileSize, fileName)).Url;
        }

        public Task DeleteAttachment(string fileName)
        {
            return exercisesApi.DeleteExerciseAttachmentAsync(ExerciseId, fileName);
        }
    }
}
