@using Microsoft.Extensions.Logging
@using Olympiad.Shared.Models
@using Olympiad.ControlPanel.Components.MarkdownEdit
@using PublicAPI.Requests.Challenges
@using PublicAPI.Requests.Exercises
@using PublicAPI.Responses.Challenges
@using Humanizer
@using PublicAPI.Responses
@using PublicAPI.Responses.Exercises
@using System.IO
@using Refit

@inject IExercisesApi ExercisesApi
@inject ILogger<EditExerciseBaseInfo> Logger
@inject MessageService MessageService
@inject IJSRuntime JS
@inject AttachmentLinkGenerator AttachmentLinkGenerator

<Card Title="Базовые параметры" Loading="Exercise is null">
    <Form Model="exerciseModel"
          Loading="saving"
          OnFinish="UpdateBaseInfo"
          Layout="@FormLayout.Vertical">
        <FormItem Label="Название" Required>
            <Input @bind-Value="@context.Title" />
        </FormItem>
        <FormItem Label="Описание" Required Help="Внутреннее описание, не видно пользователям">
            <Input @bind-Value="@context.InternalDescription" />
        </FormItem>
        <FormItem Label="Задание" Required>
            <CascadingValue Value="attachmentsProvider as IAttachmentsProvider">
                <MarkdownTextArea @bind-Value="exerciseModel.Task"
                                  MaxLength="@ExerciseLimitations.MAX_EXERCISE_TASK_LENGTH">
                    <TitleTemplate>
                        <Text>@exerciseModel.Title</Text>
                        <Text Type="@TextElementType.Secondary">Текст задания (@Exercise?.Challenge.Name)</Text>
                    </TitleTemplate>
                </MarkdownTextArea>
            </CascadingValue>
        </FormItem>
        <FormItem>
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Сохранить базовые параметры
            </Button>
        </FormItem>
    </Form>
</Card>

@code {

    [Parameter]
    public AdminExerciseInfo? Exercise { get; set; }

    [Parameter]
    public EventCallback<AdminExerciseInfo> ExerciseChanged { get; set; }



    private readonly UpdateExerciseRequest exerciseModel = new();
    private ExerciseAttachmentsProvider? attachmentsProvider;

    private bool saving;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Exercise == null)
        {
            return;
        }
        if (attachmentsProvider?.ExerciseId != Exercise.Id)
        {
            attachmentsProvider = new ExerciseAttachmentsProvider(Exercise.Id, ExercisesApi, AttachmentLinkGenerator);
        }
        exerciseModel.Title = Exercise.Name;
        exerciseModel.Task = Exercise.ExerciseTask;
        exerciseModel.InternalDescription = Exercise.InternalDescription;
    }

    private async Task UpdateBaseInfo()
    {
        if (Exercise is null)
        {
            return;
        }
        saving = true;
        try
        {
            var updateExercise = await ExercisesApi.UpdateExercise(Exercise.Id, exerciseModel);
            await ExerciseChanged.InvokeAsync(updateExercise);
            MessageService.ShowSuccess("Информация обновлена");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Can't save exercise info");
            await MessageService.Error("Ошибка при сохранении информации о задании");
        }
        finally
        {
            saving = false;
        }
    }
    private class ExerciseAttachmentsProvider : IAttachmentsProvider
    {
        private readonly IExercisesApi exercisesApi;
        private readonly AttachmentLinkGenerator attachmentLinkGenerator;

        public Guid ExerciseId { get; }

        public ExerciseAttachmentsProvider(Guid exerciseId, IExercisesApi exercisesApi, AttachmentLinkGenerator attachmentLinkGenerator)
        {
            ExerciseId = exerciseId;
            this.exercisesApi = exercisesApi;
            this.attachmentLinkGenerator = attachmentLinkGenerator;
            CurrentEditableEntityKey = $"exercise/{ExerciseId}";
        }

        public string CurrentEditableEntityKey { get; }

        public Task<List<AttachmentResponse>> GetAttachments()
        {
            return exercisesApi.GetExerciseAttachmentsAsync(ExerciseId);
        }

        public string GetAttachmentUrl(string fileName)
        {
            return attachmentLinkGenerator.GetExerciseLink(ExerciseId, fileName);
        }

        public async Task UploadAttachment(string fileName, long fileSize, string mimeType, Stream content)
        {
            await exercisesApi.UploadAttachment(ExerciseId, new List<StreamPart>
            {
                new StreamPart(content, fileName, mimeType)
            });
        }

        public Task DeleteAttachment(string fileName)
        {
            return exercisesApi.DeleteExerciseAttachmentAsync(ExerciseId, fileName);
        }
    }
}