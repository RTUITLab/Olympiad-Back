@using ByteSizeLib
@using Olympiad.ControlPanel.Pages.Exercises.Edit.Models
@using PublicAPI.Responses.ExercisesTestData
@using System.Text.Json
@inject IExercisesApi ExercisesApi
@inject IJSRuntime JS
@inject NotificationService NotificationService


<PageHeader Title="Группы тестов">
    <PageHeaderExtra>
        <ExerciseTestGroupsFileFormatDescriptionModal @ref="helpRef" ExerciseTitle="@ExerciseTitle" />
        <Button OnClick=@(() => helpRef?.Show()) Icon="@IconType.Outline.InfoCircle">Справка</Button>

        <Dropdown Trigger="@(new Trigger[] { Trigger.Click })"
                  OnClick='e => { Console.WriteLine("Dropdown button clicked."); }'>
            <Overlay>
                <Menu Selectable="false">
                    <MenuItem Icon="@IconType.Outline.Upload" Title="Загрузить" OnClick="@(() => JS.Click(inputFileRef?.Element))" />
                    @if (exercisesTestDataGroups?.Any() == true)
                    {
                        <MenuItem Icon="@IconType.Outline.Download" OnClick="DownloadTestGroups">Скачать</MenuItem>
                    }
                </Menu>
            </Overlay>
            <Unbound>
                <Button RefBack=@context>Действия <Icon Type="@IconType.Outline.Down" /></Button>
            </Unbound>
        </Dropdown>
        <InputFile @ref="inputFileRef" style="display: none" OnChange="TestGroupsFilesSelected" accept=".json" />
    </PageHeaderExtra>
</PageHeader>

@if (loading)
{
    <Skeleton Active />
}
else
{
    @if (exercisesTestDataGroups is null || exercisesTestDataGroups.Count < 1)
    {
        <Alert Type="@AlertType.Error">
            Нет тестовых групп для автоматической проверки
        </Alert>
    }
    else
    {
        <Table PageSize="exercisesTestDataGroups.Count"
       HidePagination
       DataSource="exercisesTestDataGroups"
       Context="group">
            <Column Field="group.Title" Title="Название">
            </Column>
            <Column Field="group.IsPublic" Title="Видимость">
                <Tooltip Title=@(group.IsPublic ? "Видно пользователям при просмотре задания" : "Скрытая группа, только для проверок")>
                    <Icon Type=@(group.IsPublic ? IconType.Outline.Eye : IconType.Outline.EyeInvisible) />
                </Tooltip>
            </Column>
            <Column Field="group.Score" Title="Баллы">
                <Text Keyboard>@group.Score</Text>
            </Column>
            <Column Field="group.TestCases" Title="Кейсы">
                <TitleTemplate>
                    <HelpTooltip>Количество тестовых кейсов</HelpTooltip>
                    <Text>Кейсы</Text>
                </TitleTemplate>
                <ChildContent>
                    <Text Keyboard>@group.TestCases.Count</Text>
                </ChildContent>
            </Column>
        </Table>
        <Collapse Accordion>
            @foreach (var group in exercisesTestDataGroups)
            {
                <Panel Key="@group.Id.ToString()">
                    <HeaderTemplate>
                        <Text>
                            @group.Title
                            |
                            |
                            <Text Keyboard>@group.Score</Text>
                        </Text>
                    </HeaderTemplate>
                </Panel>
            }
        </Collapse>

    }
}

@code {

    [Parameter]
    public Guid ExerciseId { get; set; }
    [Parameter]
    public string? ExerciseTitle { get; set; }
    [CascadingParameter]
    public ILogsService? LogsService { get; set; }

    private InputFile? inputFileRef;
    private bool loading = true;
    private List<ExercisesTestDataGroupResponse>? exercisesTestDataGroups;

    private ExerciseTestGroupsFileFormatDescriptionModal? helpRef;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        loading = true;
        try
        {
            exercisesTestDataGroups = await ExercisesApi.GetTestGroupsAsync(ExerciseId);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task TestGroupsFilesSelected(InputFileChangeEventArgs files)
    {
        if (exercisesTestDataGroups is null)
        {
            await NotificationService.Error(new NotificationConfig
                {
                    Message = "Нельзя загружать тесты до загрузки информации о существующих"
                });
            return;
        }
        if (files.FileCount != 1)
        {
            await NotificationService.Error(new NotificationConfig
                {
                    Message = "Можно выбрать только один файл"
                });
            return;
        }
        var file = files.File;
        var maxFileSize = ByteSize.FromMegaBytes(1);
        if (ByteSize.FromBytes(file.Size) > maxFileSize)
        {
            await NotificationService.Error(new NotificationConfig
                {
                    Message = "Максимальный размер файла с тестами : 1 мегабайт"
                });
            return;
        }
        List<JsonUserFileFormat> testGroups;
        try
        {
            var temp = await JsonSerializer.DeserializeAsync<List<JsonUserFileFormat>>(file.OpenReadStream((long)maxFileSize.Bytes));
            if (temp is null)
            {
                throw new Exception($"{nameof(JsonSerializer)} returns null");
            }
            testGroups = temp;
        }
        catch (Exception ex)
        {
            var errorMessage = "Ошибка при чтении файла";
            LogsService?.LogInfo(errorMessage, ex.Message);
            await NotificationService.Error(new NotificationConfig
                {
                    Message = errorMessage,
                    Btn = LogsService?.OpenLogsButton("Открыть логи")
                });
            return;
        }
        if (testGroups.Select(g => g.Title).Intersect(exercisesTestDataGroups.Select(g => g.Title)).Any())
        {
            await NotificationService.Error(new NotificationConfig
                {
                    Message = "Названия групп тестов должны быть уникальны",
                    Description = "Если есть необходимость отредактировать существующую группу - необходимо её удалить, потом загрузить новый файл, содержащий эту группу"
                });
            return;
        }
    }

    private async Task DownloadTestGroups()
    {
        if (exercisesTestDataGroups is null)
        {
            await NotificationService.Error(new NotificationConfig
                {
                    Message = "Невозможно скачать данные по незагруженным тестам",
                });
            return;
        }
        var userFileModel = exercisesTestDataGroups.Select(g => new JsonUserFileFormat(g.Title, g.Score, g.IsPublic,
            g.TestCases.Select(tc => new UserTestCase(tc.InData, tc.OutData)).ToList()))
            .ToList();
        var jsonView = JsonSerializer.Serialize(userFileModel);
        await JS.DownloadFile($"{ExerciseTitle}_Tests.json", jsonView);
    }
}
