@page "/challenges/{ChallengeId:guid}/exercises/{ExerciseId:guid}"
@attribute [Authorize(Roles = RoleNames.ADMIN)]

@using Olympiad.ControlPanel.Components.MarkdownEdit
@using Olympiad.ControlPanel.Pages.Exercises.Edit.Components
@using PublicAPI.Responses
@using PublicAPI.Responses.Challenges
@using Olympiad.Shared.Models
@using PublicAPI.Responses.Exercises

@inject IExercisesApi ExercisesApi
@inject MessageService MessageService
@inject ModalService ModalService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject HttpClient HttpClient
@inject ILogger<EditExercisePage> Logger

<PageTitle>@ExerciseName()</PageTitle>
<PageHeader TitleTemplate="ExerciseName(SkeletonElementSize.Default)">
    <PageHeaderBreadcrumb>
        <Breadcrumb>
            <BreadcrumbItem Href="challenges">
                Соревнования
            </BreadcrumbItem>
            <BreadcrumbItem Href="@($"challenges/{ChallengeId}")">
                <TextFieldSkeleton Text="@exerciseResponse?.Challenge.Name" />
            </BreadcrumbItem>
            <BreadcrumbItem Href="@($"challenges/{ChallengeId}/exercises")">
                Задания
            </BreadcrumbItem>
            <BreadcrumbItem Href="@($"challenges/{ChallengeId}/exercises")">
                @ExerciseName()
            </BreadcrumbItem>
        </Breadcrumb>
    </PageHeaderBreadcrumb>
    <PageHeaderExtra>
        <Dropdown Trigger="DrowdownHelpers.OnlyClickTrigger" @ref="actionsRef">
            <Overlay>
                <Menu Class="buttons-menu big-icon" Selectable="false" Mode="MenuMode.Inline" OnMenuItemClicked=@(() => actionsRef!.Close())>
                    <MenuItem Title="Переместить задание" Icon="@IconType.Outline.Swap" OnClick="TransferExercise" />
                    <MenuDivider />
                    <Popconfirm Title="Вы действительно хотите удалить задание?" OkText="Удалить задание" CancelText="Отмена"
                                OnConfirm="DeleteExercise">
                        <MenuItem Title="Удалить" Icon="@IconType.Outline.Delete" Style="color: #ff4d4f;" />
                    </Popconfirm>
                </Menu>
            </Overlay>
            <ChildContent>
                <Button>Действия <Icon Type="@IconType.Outline.Down" /></Button>
            </ChildContent>
        </Dropdown>
    </PageHeaderExtra>
</PageHeader>
<Row Gutter=@((8, 8))>
    <AntDesign.Col Xl="12" Span="24">
        <EditExerciseBaseInfo @bind-Exercise="exerciseResponse" />
    </AntDesign.Col>
    <AntDesign.Col Xl="12" Span="24">
        @if (exerciseResponse?.Type == ExerciseType.Code)
        {
            <EditExerciseCodeRestrictions ExerciseId="ExerciseId" Restrictions="exerciseResponse?.Restrictions?.Code" />
            <EditExerciseTestGroups ExerciseId="ExerciseId" ExerciseTitle="@exerciseResponse?.Name" Style="margin-top: 8px;"/>
        }
        else if (exerciseResponse?.Type == ExerciseType.Docs)
        {
            <EditExerciseDocsRestrictions ExerciseId="ExerciseId" Restrictions="exerciseResponse.Restrictions.Docs"/>
        }
        else if (exerciseResponse is null)
        {
        }
        else
        {
            <Alert>Неподдерживаемый тип задания</Alert>
        }
    </AntDesign.Col>
</Row>

@code {
    [Parameter]
    public Guid ChallengeId { get; set; }
    [Parameter]
    public Guid ExerciseId { get; set; }

    private Dropdown? actionsRef;

    private RenderFragment ExerciseName(string size = SkeletonElementSize.Small)
    {
        // Return template in full body method for VS code formatter
        return
    @<Template>
        <TextFieldSkeleton Text="@exerciseResponse?.Name" Size="@size" />
    </Template>
    ;
    }
    private ExerciseInfo? exerciseResponse;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            exerciseResponse = await ExercisesApi.GetExerciseAsync(ExerciseId);
            if (exerciseResponse.ChallengeId != ChallengeId)
            {
                GoToExercisesPage();
                await MessageService.Warn("Неверно составленный адрес страницы");
            }
        }
        catch
        {
            GoToExercisesPage();
            await MessageService.Warn("Не удалось получить информацию о задании");
        }
    }

    private async Task DeleteExercise()
    {
        try
        {
            await ExercisesApi.DeleteExerciseAsync(ExerciseId);
            GoToExercisesPage();
            await MessageService.Info("Задание удалено");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Can't delete exercise");
            await MessageService.Warning("Не удалось удалить задание");
        }
    }

    private async Task TransferExercise()
    {
        if (exerciseResponse is null)
        {
            await MessageService.Warning("Нет информации о задании");
            return;
        }
        var options = new ConfirmOptions
            {
                Title = "Перемещение задания"
            };
        var confirmRef = await ModalService
            .CreateConfirmAsync<TransferExerciseFeedback, ExerciseInfo, Guid>(options, exerciseResponse);
        confirmRef.OnOk = newChallengeId =>
        {
            NavigationManager.NavigateTo(Routes.Exercises.ExerciseEdit(newChallengeId, ExerciseId));
            StateHasChanged();
            return Task.CompletedTask;
        };
    }

    private void GoToExercisesPage()
    {
        NavigationManager.NavigateTo(Routes.Challenges.Exercises(ChallengeId));
    }

    
}
